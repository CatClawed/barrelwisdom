import { EventEmitter, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { AppSidebarService } from './app-sidebar.service';
import * as ɵngcc0 from '@angular/core';
export declare class AppSidebarComponent implements OnInit, OnDestroy {
    private document;
    private renderer;
    private sidebarService;
    private subscriptionEvents;
    private _minimized;
    compact: boolean;
    display: any;
    fixed: boolean;
    offCanvas: boolean;
    minimized: boolean;
    /**
     * Emits whenever the minimized state of the sidebar changes.
     * Primarily used to facilitate two-way binding.
     */
    minimizedChange: EventEmitter<boolean>;
    sidebarClass: boolean;
    constructor(document: any, renderer: Renderer2, sidebarService: AppSidebarService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    isCompact(compact?: boolean): void;
    isFixed(fixed?: boolean): void;
    toggleMinimized(): void;
    isOffCanvas(offCanvas?: boolean): void;
    displayBreakpoint(display?: any): void;
    private _updateMinimized;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AppSidebarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AppSidebarComponent, "app-sidebar, cui-sidebar", never, { "minimized": "minimized"; "compact": "compact"; "display": "display"; "fixed": "fixed"; "offCanvas": "offCanvas"; }, { "minimizedChange": "minimizedChange"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLXNpZGViYXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImFwcC1zaWRlYmFyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSwgT25Jbml0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQXBwU2lkZWJhclNlcnZpY2UgfSBmcm9tICcuL2FwcC1zaWRlYmFyLnNlcnZpY2UnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBcHBTaWRlYmFyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG4gICAgcHJpdmF0ZSBkb2N1bWVudDtcclxuICAgIHByaXZhdGUgcmVuZGVyZXI7XHJcbiAgICBwcml2YXRlIHNpZGViYXJTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb25FdmVudHM7XHJcbiAgICBwcml2YXRlIF9taW5pbWl6ZWQ7XHJcbiAgICBjb21wYWN0OiBib29sZWFuO1xyXG4gICAgZGlzcGxheTogYW55O1xyXG4gICAgZml4ZWQ6IGJvb2xlYW47XHJcbiAgICBvZmZDYW52YXM6IGJvb2xlYW47XHJcbiAgICBtaW5pbWl6ZWQ6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEVtaXRzIHdoZW5ldmVyIHRoZSBtaW5pbWl6ZWQgc3RhdGUgb2YgdGhlIHNpZGViYXIgY2hhbmdlcy5cclxuICAgICAqIFByaW1hcmlseSB1c2VkIHRvIGZhY2lsaXRhdGUgdHdvLXdheSBiaW5kaW5nLlxyXG4gICAgICovXHJcbiAgICBtaW5pbWl6ZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcclxuICAgIHNpZGViYXJDbGFzczogYm9vbGVhbjtcclxuICAgIGNvbnN0cnVjdG9yKGRvY3VtZW50OiBhbnksIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHNpZGViYXJTZXJ2aWNlOiBBcHBTaWRlYmFyU2VydmljZSk7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICAgIGlzQ29tcGFjdChjb21wYWN0PzogYm9vbGVhbik6IHZvaWQ7XHJcbiAgICBpc0ZpeGVkKGZpeGVkPzogYm9vbGVhbik6IHZvaWQ7XHJcbiAgICB0b2dnbGVNaW5pbWl6ZWQoKTogdm9pZDtcclxuICAgIGlzT2ZmQ2FudmFzKG9mZkNhbnZhcz86IGJvb2xlYW4pOiB2b2lkO1xyXG4gICAgZGlzcGxheUJyZWFrcG9pbnQoZGlzcGxheT86IGFueSk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIF91cGRhdGVNaW5pbWl6ZWQ7XHJcbn1cclxuIl19