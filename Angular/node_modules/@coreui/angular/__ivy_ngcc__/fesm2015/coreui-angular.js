import { __decorate, __param, __metadata } from 'tslib';
import { Inject, Renderer2, Injectable, Input, HostListener, Directive, ElementRef, NgModule, HostBinding, Component, ɵɵdefineInjectable, ɵɵinject, EventEmitter, Output, Pipe } from '@angular/core';
import { DOCUMENT, CommonModule } from '@angular/common';
import { NavigationEnd, Router, ActivatedRoute, RouterModule } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
import { filter } from 'rxjs/operators';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/router';
import * as ɵngcc2 from '@angular/common';

const _c0 = ["*"];
function AppBreadcrumbComponent_ng_template_0_li_0_a_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const breadcrumb_r1 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("routerLink", breadcrumb_r1.url);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(breadcrumb_r1.label.title);
} }
function AppBreadcrumbComponent_ng_template_0_li_0_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const breadcrumb_r1 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("routerLink", breadcrumb_r1.url);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(breadcrumb_r1.label.title);
} }
const _c1 = function (a0) { return { active: a0 }; };
function AppBreadcrumbComponent_ng_template_0_li_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 2);
    ɵngcc0.ɵɵtemplate(1, AppBreadcrumbComponent_ng_template_0_li_0_a_1_Template, 2, 2, "a", 3);
    ɵngcc0.ɵɵtemplate(2, AppBreadcrumbComponent_ng_template_0_li_0_span_2_Template, 2, 2, "span", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const last_r2 = ɵngcc0.ɵɵnextContext().last;
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c1, last_r2));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !last_r2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", last_r2);
} }
function AppBreadcrumbComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, AppBreadcrumbComponent_ng_template_0_li_0_Template, 3, 5, "li", 1);
} if (rf & 2) {
    const breadcrumb_r1 = ctx.$implicit;
    const last_r2 = ctx.last;
    ɵngcc0.ɵɵproperty("ngIf", breadcrumb_r1.label.title && (breadcrumb_r1.url.slice(0 - 1) == "/" || last_r2));
} }
function CuiBreadcrumbComponent_ng_template_1_li_0_a_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const breadcrumb_r1 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("routerLink", breadcrumb_r1.url);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(breadcrumb_r1.label.title);
} }
function CuiBreadcrumbComponent_ng_template_1_li_0_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const breadcrumb_r1 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵproperty("routerLink", breadcrumb_r1.url);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(breadcrumb_r1.label.title);
} }
function CuiBreadcrumbComponent_ng_template_1_li_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 3);
    ɵngcc0.ɵɵtemplate(1, CuiBreadcrumbComponent_ng_template_1_li_0_a_1_Template, 2, 2, "a", 4);
    ɵngcc0.ɵɵtemplate(2, CuiBreadcrumbComponent_ng_template_1_li_0_span_2_Template, 2, 2, "span", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const last_r2 = ɵngcc0.ɵɵnextContext().last;
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c1, last_r2));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !last_r2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", last_r2);
} }
function CuiBreadcrumbComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, CuiBreadcrumbComponent_ng_template_1_li_0_Template, 3, 5, "li", 2);
} if (rf & 2) {
    const breadcrumb_r1 = ctx.$implicit;
    const last_r2 = ctx.last;
    ɵngcc0.ɵɵproperty("ngIf", breadcrumb_r1.label.title && (breadcrumb_r1.url.slice(0 - 1) == "/" || last_r2));
} }
function AppHeaderComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 2);
    ɵngcc0.ɵɵelement(1, "span", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMapInterpolate1("navbar-toggler ", ctx_r0.sidebarTogglerMobileClass, "");
} }
function AppHeaderComponent_ng_template_2_img_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "img", 5);
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("appHtmlAttr", ctx_r6.navbarBrand)("ngClass", "navbar-brand");
} }
function AppHeaderComponent_ng_template_2_img_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "img", 5);
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("appHtmlAttr", ctx_r7.navbarBrandFull)("ngClass", "navbar-brand-full");
} }
function AppHeaderComponent_ng_template_2_img_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "img", 5);
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("appHtmlAttr", ctx_r8.navbarBrandMinimized)("ngClass", "navbar-brand-minimized");
} }
function AppHeaderComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, AppHeaderComponent_ng_template_2_img_0_Template, 1, 2, "img", 4);
    ɵngcc0.ɵɵtemplate(1, AppHeaderComponent_ng_template_2_img_1_Template, 1, 2, "img", 4);
    ɵngcc0.ɵɵtemplate(2, AppHeaderComponent_ng_template_2_img_2_Template, 1, 2, "img", 4);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.navbarBrand);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.navbarBrandFull);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.navbarBrandMinimized);
} }
function AppHeaderComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 6);
    ɵngcc0.ɵɵelement(1, "div", 7);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r2.navbarBrandText.text, ɵngcc0.ɵɵsanitizeHtml);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerHTML", ctx_r2.navbarBrandText.icon, ɵngcc0.ɵɵsanitizeHtml);
} }
function AppHeaderComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 8);
    ɵngcc0.ɵɵelement(1, "span", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMapInterpolate1("navbar-toggler ", ctx_r3.sidebarTogglerClass, "");
    ɵngcc0.ɵɵproperty("appSidebarToggler", ctx_r3.sidebarToggler);
} }
function AppHeaderComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 9);
    ɵngcc0.ɵɵelement(1, "span", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMapInterpolate1("navbar-toggler ", ctx_r4.asideTogglerClass, "");
    ɵngcc0.ɵɵproperty("appAsideMenuToggler", ctx_r4.asideMenuToggler);
} }
function AppHeaderComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "button", 10);
    ɵngcc0.ɵɵelement(1, "span", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMapInterpolate1("navbar-toggler ", ctx_r5.asideTogglerMobileClass, "");
} }
function AppSidebarNavDropdownComponent_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 3);
    ɵngcc0.ɵɵpipe(1, "appSidebarNavIcon");
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r0.item));
} }
function AppSidebarNavDropdownComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 3);
    ɵngcc0.ɵɵpipe(1, "appSidebarNavBadge");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r1.item));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.item.badge.text);
} }
function AppSidebarNavItemsComponent_ng_container_0_app_sidebar_nav_dropdown_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "app-sidebar-nav-dropdown", 7);
    ɵngcc0.ɵɵpipe(1, "appSidebarNavItemClass");
} if (rf & 2) {
    const item_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("open", ctx_r2.helper.isActive(ctx_r2.router, item_r1));
    ɵngcc0.ɵɵproperty("item", item_r1)("ngClass", ɵngcc0.ɵɵpipeBind1(1, 4, item_r1));
} }
function AppSidebarNavItemsComponent_ng_container_0_app_sidebar_nav_divider_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "app-sidebar-nav-divider", 8);
    ɵngcc0.ɵɵpipe(1, "appSidebarNavItemClass");
} if (rf & 2) {
    const item_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("item", item_r1)("ngClass", ɵngcc0.ɵɵpipeBind1(1, 3, item_r1))("appHtmlAttr", item_r1.attributes);
} }
function AppSidebarNavItemsComponent_ng_container_0_app_sidebar_nav_title_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "app-sidebar-nav-title", 8);
    ɵngcc0.ɵɵpipe(1, "appSidebarNavItemClass");
} if (rf & 2) {
    const item_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("item", item_r1)("ngClass", ɵngcc0.ɵɵpipeBind1(1, 3, item_r1))("appHtmlAttr", item_r1.attributes);
} }
function AppSidebarNavItemsComponent_ng_container_0_app_sidebar_nav_label_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "app-sidebar-nav-label", 9);
    ɵngcc0.ɵɵpipe(1, "appSidebarNavItemClass");
} if (rf & 2) {
    const item_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("item", item_r1)("ngClass", ɵngcc0.ɵɵpipeBind1(1, 2, item_r1));
} }
function AppSidebarNavItemsComponent_ng_container_0_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function AppSidebarNavItemsComponent_ng_container_0_app_sidebar_nav_link_7_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "app-sidebar-nav-link", 10);
    ɵngcc0.ɵɵlistener("linkClick", function AppSidebarNavItemsComponent_ng_container_0_app_sidebar_nav_link_7_Template_app_sidebar_nav_link_linkClick_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(2); return ctx_r12.hideMobile(); });
    ɵngcc0.ɵɵpipe(1, "appSidebarNavItemClass");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("item", item_r1)("ngClass", ɵngcc0.ɵɵpipeBind1(1, 2, item_r1));
} }
function AppSidebarNavItemsComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementContainerStart(1, 1);
    ɵngcc0.ɵɵtemplate(2, AppSidebarNavItemsComponent_ng_container_0_app_sidebar_nav_dropdown_2_Template, 2, 6, "app-sidebar-nav-dropdown", 2);
    ɵngcc0.ɵɵtemplate(3, AppSidebarNavItemsComponent_ng_container_0_app_sidebar_nav_divider_3_Template, 2, 5, "app-sidebar-nav-divider", 3);
    ɵngcc0.ɵɵtemplate(4, AppSidebarNavItemsComponent_ng_container_0_app_sidebar_nav_title_4_Template, 2, 5, "app-sidebar-nav-title", 3);
    ɵngcc0.ɵɵtemplate(5, AppSidebarNavItemsComponent_ng_container_0_app_sidebar_nav_label_5_Template, 2, 4, "app-sidebar-nav-label", 4);
    ɵngcc0.ɵɵtemplate(6, AppSidebarNavItemsComponent_ng_container_0_ng_container_6_Template, 1, 0, "ng-container", 5);
    ɵngcc0.ɵɵtemplate(7, AppSidebarNavItemsComponent_ng_container_0_app_sidebar_nav_link_7_Template, 2, 4, "app-sidebar-nav-link", 6);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitch", ctx_r0.helper.itemType(item_r1));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "dropdown");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "divider");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "title");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "label");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", "empty");
} }
function AppSidebarNavLinkContentComponent_ng_container_0_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 2);
    ɵngcc0.ɵɵpipe(1, "appSidebarNavIcon");
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r1.item));
} }
function AppSidebarNavLinkContentComponent_ng_container_0_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 2);
    ɵngcc0.ɵɵpipe(1, "appSidebarNavBadge");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r2.item));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.item.badge.text);
} }
function AppSidebarNavLinkContentComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, AppSidebarNavLinkContentComponent_ng_container_0_i_1_Template, 2, 3, "i", 1);
    ɵngcc0.ɵɵelementContainerStart(2);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵtemplate(4, AppSidebarNavLinkContentComponent_ng_container_0_span_4_Template, 3, 4, "span", 1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.helper.hasIcon(ctx_r0.item));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.item.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.helper.hasBadge(ctx_r0.item));
} }
function AppSidebarNavLinkComponent_a_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 4);
    ɵngcc0.ɵɵpipe(1, "appSidebarNavLink");
    ɵngcc0.ɵɵelement(2, "app-sidebar-nav-link-content", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpipeBind1(1, 3, ctx_r0.item))("appHtmlAttr", ctx_r0.item.attributes);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("item", ctx_r0.item);
} }
function AppSidebarNavLinkComponent_a_2_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 6);
    ɵngcc0.ɵɵlistener("click", function AppSidebarNavLinkComponent_a_2_Template_a_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.linkClicked(); });
    ɵngcc0.ɵɵpipe(1, "appSidebarNavLink");
    ɵngcc0.ɵɵelement(2, "app-sidebar-nav-link-content", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpipeBind1(1, 4, ctx_r1.item))("href", ctx_r1.href, ɵngcc0.ɵɵsanitizeUrl)("appHtmlAttr", ctx_r1.item.attributes);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("item", ctx_r1.item);
} }
function AppSidebarNavLinkComponent_a_3_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 7);
    ɵngcc0.ɵɵlistener("click", function AppSidebarNavLinkComponent_a_3_Template_a_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.linkClicked(); });
    ɵngcc0.ɵɵpipe(1, "appSidebarNavLink");
    ɵngcc0.ɵɵelement(2, "app-sidebar-nav-link-content", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("active", ctx_r2.linkActive);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpipeBind1(1, 14, ctx_r2.item))("appHtmlAttr", ctx_r2.item.attributes)("target", ctx_r2.item.attributes == null ? null : ctx_r2.item.attributes.target)("queryParams", ctx_r2.item.linkProps == null ? null : ctx_r2.item.linkProps.queryParams)("fragment", ctx_r2.item.linkProps == null ? null : ctx_r2.item.linkProps.fragment)("queryParamsHandling", ctx_r2.item.linkProps == null ? null : ctx_r2.item.linkProps.queryParamsHandling)("preserveFragment", ctx_r2.item.linkProps == null ? null : ctx_r2.item.linkProps.preserveFragment)("skipLocationChange", ctx_r2.item.linkProps == null ? null : ctx_r2.item.linkProps.skipLocationChange)("replaceUrl", ctx_r2.item.linkProps == null ? null : ctx_r2.item.linkProps.replaceUrl)("state", ctx_r2.item.linkProps == null ? null : ctx_r2.item.linkProps.state)("routerLink", ctx_r2.item.url);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("item", ctx_r2.item);
} }
function AppSidebarNavLabelComponent_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 2);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r0.getLabelIconClass());
} }
function AppSidebarNavLabelComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 2);
    ɵngcc0.ɵɵpipe(1, "appSidebarNavBadge");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpipeBind1(1, 2, ctx_r1.item));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.item.badge.text);
} }
const sidebarCssClasses = [
    'sidebar-show',
    'sidebar-sm-show',
    'sidebar-md-show',
    'sidebar-lg-show',
    'sidebar-xl-show'
];
const asideMenuCssClasses = [
    'aside-menu-show',
    'aside-menu-sm-show',
    'aside-menu-md-show',
    'aside-menu-lg-show',
    'aside-menu-xl-show'
];

const RemoveClasses = (NewClassNames) => {
    const MatchClasses = NewClassNames.map((Class) => document.body.classList.contains(Class));
    return MatchClasses.indexOf(true) !== -1;
};
const ɵ0 = RemoveClasses;
const ToggleClasses = (Toggle, ClassNames) => {
    const Level = ClassNames.indexOf(Toggle);
    const NewClassNames = ClassNames.slice(0, Level + 1);
    if (RemoveClasses(NewClassNames)) {
        NewClassNames.map((Class) => document.body.classList.remove(Class));
    }
    else {
        document.body.classList.add(Toggle);
    }
};
let ClassToggler = class ClassToggler {
    constructor(document, renderer) {
        this.document = document;
        this.renderer = renderer;
    }
    removeClasses(NewClassNames) {
        const MatchClasses = NewClassNames.map((Class) => this.document.body.classList.contains(Class));
        return MatchClasses.indexOf(true) !== -1;
    }
    toggleClasses(Toggle, ClassNames) {
        const Level = ClassNames.indexOf(Toggle);
        const NewClassNames = ClassNames.slice(0, Level + 1);
        if (this.removeClasses(NewClassNames)) {
            NewClassNames.map((Class) => this.renderer.removeClass(this.document.body, Class));
        }
        else {
            this.renderer.addClass(this.document.body, Toggle);
        }
    }
};
ClassToggler.ɵfac = function ClassToggler_Factory(t) { return new (t || ClassToggler)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.Renderer2)); };
ClassToggler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ClassToggler, factory: ClassToggler.ɵfac });
ClassToggler.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 }
];
ClassToggler = __decorate([ __param(0, Inject(DOCUMENT)),
    __metadata("design:paramtypes", [Object, Renderer2])
], ClassToggler);

/**
 * Allows the sidebar to be toggled via click.
 */
let SidebarToggleDirective = class SidebarToggleDirective {
    constructor(classToggler) {
        this.classToggler = classToggler;
    }
    ngOnInit() {
        this.bp = this.breakpoint;
    }
    toggleOpen($event) {
        $event.preventDefault();
        const cssClass = this.bp ? `sidebar-${this.bp}-show` : sidebarCssClasses[0];
        this.classToggler.toggleClasses(cssClass, sidebarCssClasses);
    }
};
SidebarToggleDirective.ɵfac = function SidebarToggleDirective_Factory(t) { return new (t || SidebarToggleDirective)(ɵngcc0.ɵɵdirectiveInject(ClassToggler)); };
SidebarToggleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SidebarToggleDirective, selectors: [["", "appSidebarToggler", ""]], hostBindings: function SidebarToggleDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function SidebarToggleDirective_click_HostBindingHandler($event) { return ctx.toggleOpen($event); });
    } }, inputs: { breakpoint: ["appSidebarToggler", "breakpoint"] }, features: [ɵngcc0.ɵɵProvidersFeature([ClassToggler])] });
SidebarToggleDirective.ctorParameters = () => [
    { type: ClassToggler }
];
__decorate([
    Input('appSidebarToggler'),
    __metadata("design:type", String)
], SidebarToggleDirective.prototype, "breakpoint", void 0);
__decorate([
    HostListener('click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], SidebarToggleDirective.prototype, "toggleOpen", null);
SidebarToggleDirective = __decorate([ __metadata("design:paramtypes", [ClassToggler])
], SidebarToggleDirective);
let SidebarMinimizeDirective = class SidebarMinimizeDirective {
    constructor(document, renderer) {
        this.document = document;
        this.renderer = renderer;
    }
    toggleOpen($event) {
        $event.preventDefault();
        const body = this.document.body;
        body.classList.contains('sidebar-minimized') ?
            this.renderer.removeClass(body, 'sidebar-minimized') :
            this.renderer.addClass(body, 'sidebar-minimized');
    }
};
SidebarMinimizeDirective.ɵfac = function SidebarMinimizeDirective_Factory(t) { return new (t || SidebarMinimizeDirective)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
SidebarMinimizeDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SidebarMinimizeDirective, selectors: [["", "appSidebarMinimizer", ""]], hostBindings: function SidebarMinimizeDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function SidebarMinimizeDirective_click_HostBindingHandler($event) { return ctx.toggleOpen($event); });
    } } });
SidebarMinimizeDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 }
];
__decorate([
    HostListener('click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], SidebarMinimizeDirective.prototype, "toggleOpen", null);
SidebarMinimizeDirective = __decorate([ __param(0, Inject(DOCUMENT)),
    __metadata("design:paramtypes", [Object, Renderer2])
], SidebarMinimizeDirective);
let MobileSidebarToggleDirective = class MobileSidebarToggleDirective {
    constructor(document, renderer) {
        this.document = document;
        this.renderer = renderer;
    }
    toggleOpen($event) {
        $event.preventDefault();
        const body = this.document.body;
        body.classList.contains('sidebar-show') ?
            this.renderer.removeClass(body, 'sidebar-show') :
            this.renderer.addClass(body, 'sidebar-show');
    }
};
MobileSidebarToggleDirective.ɵfac = function MobileSidebarToggleDirective_Factory(t) { return new (t || MobileSidebarToggleDirective)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
MobileSidebarToggleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MobileSidebarToggleDirective, selectors: [["", "appMobileSidebarToggler", ""]], hostBindings: function MobileSidebarToggleDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function MobileSidebarToggleDirective_click_HostBindingHandler($event) { return ctx.toggleOpen($event); });
    } } });
MobileSidebarToggleDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 }
];
__decorate([
    HostListener('click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], MobileSidebarToggleDirective.prototype, "toggleOpen", null);
MobileSidebarToggleDirective = __decorate([ __param(0, Inject(DOCUMENT)),
    __metadata("design:paramtypes", [Object, Renderer2])
], MobileSidebarToggleDirective);
/**
 * Allows the off-canvas sidebar to be closed via click.
 */
let SidebarOffCanvasCloseDirective = class SidebarOffCanvasCloseDirective {
    constructor(document, renderer) {
        this.document = document;
        this.renderer = renderer;
    }
    toggleOpen($event) {
        $event.preventDefault();
        const body = this.document.body;
        if (body.classList.contains('sidebar-off-canvas')) {
            body.classList.contains('sidebar-show') ?
                this.renderer.removeClass(body, 'sidebar-show') :
                this.renderer.addClass(body, 'sidebar-show');
        }
    }
};
SidebarOffCanvasCloseDirective.ɵfac = function SidebarOffCanvasCloseDirective_Factory(t) { return new (t || SidebarOffCanvasCloseDirective)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
SidebarOffCanvasCloseDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SidebarOffCanvasCloseDirective, selectors: [["", "appSidebarClose", ""]], hostBindings: function SidebarOffCanvasCloseDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function SidebarOffCanvasCloseDirective_click_HostBindingHandler($event) { return ctx.toggleOpen($event); });
    } } });
SidebarOffCanvasCloseDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 }
];
__decorate([
    HostListener('click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], SidebarOffCanvasCloseDirective.prototype, "toggleOpen", null);
SidebarOffCanvasCloseDirective = __decorate([ __param(0, Inject(DOCUMENT)),
    __metadata("design:paramtypes", [Object, Renderer2])
], SidebarOffCanvasCloseDirective);
let BrandMinimizeDirective = class BrandMinimizeDirective {
    constructor(document, renderer) {
        this.document = document;
        this.renderer = renderer;
    }
    toggleOpen($event) {
        $event.preventDefault();
        const body = this.document.body;
        body.classList.contains('brand-minimized') ?
            this.renderer.removeClass(body, 'brand-minimized') :
            this.renderer.addClass(body, 'brand-minimized');
    }
};
BrandMinimizeDirective.ɵfac = function BrandMinimizeDirective_Factory(t) { return new (t || BrandMinimizeDirective)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
BrandMinimizeDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: BrandMinimizeDirective, selectors: [["", "appBrandMinimizer", ""]], hostBindings: function BrandMinimizeDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function BrandMinimizeDirective_click_HostBindingHandler($event) { return ctx.toggleOpen($event); });
    } } });
BrandMinimizeDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 }
];
__decorate([
    HostListener('click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], BrandMinimizeDirective.prototype, "toggleOpen", null);
BrandMinimizeDirective = __decorate([ __param(0, Inject(DOCUMENT)),
    __metadata("design:paramtypes", [Object, Renderer2])
], BrandMinimizeDirective);
/**
 * Allows the aside to be toggled via click.
 */
let AsideToggleDirective = class AsideToggleDirective {
    constructor(classToggler) {
        this.classToggler = classToggler;
    }
    ngOnInit() {
        this.bp = this.breakpoint;
    }
    toggleOpen($event) {
        $event.preventDefault();
        const cssClass = this.bp ? `aside-menu-${this.bp}-show` : asideMenuCssClasses[0];
        this.classToggler.toggleClasses(cssClass, asideMenuCssClasses);
    }
};
AsideToggleDirective.ɵfac = function AsideToggleDirective_Factory(t) { return new (t || AsideToggleDirective)(ɵngcc0.ɵɵdirectiveInject(ClassToggler)); };
AsideToggleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AsideToggleDirective, selectors: [["", "appAsideMenuToggler", ""]], hostBindings: function AsideToggleDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function AsideToggleDirective_click_HostBindingHandler($event) { return ctx.toggleOpen($event); });
    } }, inputs: { breakpoint: ["appAsideMenuToggler", "breakpoint"] }, features: [ɵngcc0.ɵɵProvidersFeature([ClassToggler])] });
AsideToggleDirective.ctorParameters = () => [
    { type: ClassToggler }
];
__decorate([
    Input('appAsideMenuToggler'),
    __metadata("design:type", String)
], AsideToggleDirective.prototype, "breakpoint", void 0);
__decorate([
    HostListener('click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AsideToggleDirective.prototype, "toggleOpen", null);
AsideToggleDirective = __decorate([ __metadata("design:paramtypes", [ClassToggler])
], AsideToggleDirective);
let HtmlAttributesDirective = class HtmlAttributesDirective {
    constructor(renderer, el) {
        this.renderer = renderer;
        this.el = el;
    }
    ngOnInit() {
        const attribs = this.appHtmlAttr;
        for (const attr in attribs) {
            if (attr === 'style' && typeof (attribs[attr]) === 'object') {
                this.setStyle(attribs[attr]);
            }
            else if (attr === 'class') {
                this.addClass(attribs[attr]);
            }
            else {
                this.setAttrib(attr, attribs[attr]);
            }
        }
    }
    setStyle(styles) {
        for (const style in styles) {
            this.renderer.setStyle(this.el.nativeElement, style, styles[style]);
        }
    }
    addClass(classes) {
        const classArray = (Array.isArray(classes) ? classes : classes.split(' '));
        classArray.filter((element) => element.length > 0).forEach(element => {
            this.renderer.addClass(this.el.nativeElement, element);
        });
    }
    setAttrib(key, value) {
        value !== null ?
            this.renderer.setAttribute(this.el.nativeElement, key, value) :
            this.renderer.removeAttribute(this.el.nativeElement, key);
    }
};
HtmlAttributesDirective.ɵfac = function HtmlAttributesDirective_Factory(t) { return new (t || HtmlAttributesDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
HtmlAttributesDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: HtmlAttributesDirective, selectors: [["", "appHtmlAttr", ""]], inputs: { appHtmlAttr: "appHtmlAttr" } });
HtmlAttributesDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], HtmlAttributesDirective.prototype, "appHtmlAttr", void 0);
HtmlAttributesDirective = __decorate([ __metadata("design:paramtypes", [Renderer2,
        ElementRef])
], HtmlAttributesDirective);

let LayoutModule = class LayoutModule {
};
LayoutModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LayoutModule });
LayoutModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LayoutModule_Factory(t) { return new (t || LayoutModule)(); }, providers: [
        ClassToggler
    ], imports: [[
            CommonModule
        ]] });

function Replace(el) {
    const nativeElement = el.nativeElement;
    const parentElement = nativeElement.parentElement;
    // move all children out of the element
    while (nativeElement.firstChild) {
        parentElement.insertBefore(nativeElement.firstChild, nativeElement);
    }
    // remove the empty element(the host)
    parentElement.removeChild(nativeElement);
}

let AppAsideComponent = class AppAsideComponent {
    constructor(document, renderer) {
        this.document = document;
        this.renderer = renderer;
        this.fixedClass = 'aside-menu-fixed';
        this.asideMenuClass = true;
    }
    ngOnInit() {
        this.isFixed(this.fixed);
        this.isOffCanvas(this.offCanvas);
        this.displayBreakpoint(this.display);
    }
    ngOnDestroy() {
        this.renderer.removeClass(this.document.body, this.fixedClass);
    }
    isFixed(fixed = this.fixed) {
        if (fixed) {
            this.renderer.addClass(this.document.body, this.fixedClass);
        }
    }
    isOffCanvas(offCanvas = this.offCanvas) {
        if (offCanvas) {
            this.renderer.addClass(this.document.body, 'aside-menu-off-canvas');
        }
    }
    displayBreakpoint(display = this.display) {
        if (display !== false) {
            const cssClass = this.display ? `aside-menu-${this.display}-show` : asideMenuCssClasses[0];
            this.renderer.addClass(this.document.body, cssClass);
        }
    }
};
AppAsideComponent.ɵfac = function AppAsideComponent_Factory(t) { return new (t || AppAsideComponent)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
AppAsideComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppAsideComponent, selectors: [["app-aside"], ["cui-aside"]], hostVars: 2, hostBindings: function AppAsideComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("aside-menu", ctx.asideMenuClass);
    } }, inputs: { display: "display", fixed: "fixed", offCanvas: "offCanvas" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function AppAsideComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
AppAsideComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], AppAsideComponent.prototype, "display", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AppAsideComponent.prototype, "fixed", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AppAsideComponent.prototype, "offCanvas", void 0);
__decorate([
    HostBinding('class.aside-menu'),
    __metadata("design:type", Object)
], AppAsideComponent.prototype, "asideMenuClass", void 0);
AppAsideComponent = __decorate([ __param(0, Inject(DOCUMENT)),
    __metadata("design:paramtypes", [Object, Renderer2])
], AppAsideComponent);

let AppAsideModule = class AppAsideModule {
};
AppAsideModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AppAsideModule });
AppAsideModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AppAsideModule_Factory(t) { return new (t || AppAsideModule)(); }, imports: [[
            CommonModule,
            LayoutModule
        ],
        LayoutModule] });

let AppBreadcrumbService = class AppBreadcrumbService {
    constructor(router, route) {
        this.router = router;
        this.route = route;
        this.breadcrumbSubject = new BehaviorSubject(new Array());
        this.breadcrumbs = this.breadcrumbSubject.asObservable();
        this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe((event) => {
            const breadcrumbs = [];
            let currentRoute = this.route.root;
            let url = '';
            do {
                const childrenRoutes = currentRoute.children;
                currentRoute = null;
                // tslint:disable-next-line:no-shadowed-variable
                childrenRoutes.forEach(route => {
                    if (route.outlet === 'primary') {
                        const routeSnapshot = route.snapshot;
                        url += '/' + routeSnapshot.url.map(segment => segment.path).join('/');
                        breadcrumbs.push({
                            label: route.snapshot.data,
                            url
                        });
                        currentRoute = route;
                    }
                });
            } while (currentRoute);
            this.breadcrumbSubject.next(Object.assign([], breadcrumbs));
            return breadcrumbs;
        });
    }
};
AppBreadcrumbService.ɵfac = function AppBreadcrumbService_Factory(t) { return new (t || AppBreadcrumbService)(ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ɵngcc1.ActivatedRoute)); };
AppBreadcrumbService.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute }
];
AppBreadcrumbService.ɵprov = ɵɵdefineInjectable({ factory: function AppBreadcrumbService_Factory() { return new AppBreadcrumbService(ɵɵinject(Router), ɵɵinject(ActivatedRoute)); }, token: AppBreadcrumbService, providedIn: "root" });
AppBreadcrumbService = __decorate([ __metadata("design:paramtypes", [Router, ActivatedRoute])
], AppBreadcrumbService);

let AppBreadcrumbComponent = class AppBreadcrumbComponent {
    constructor(document, renderer, service, el) {
        this.document = document;
        this.renderer = renderer;
        this.service = service;
        this.el = el;
        this.fixedClass = 'breadcrumb-fixed';
    }
    ngOnInit() {
        Replace(this.el);
        this.isFixed(this.fixed);
        this.breadcrumbs = this.service.breadcrumbs;
    }
    ngOnDestroy() {
        this.renderer.removeClass(this.document.body, this.fixedClass);
    }
    isFixed(fixed = this.fixed) {
        if (fixed) {
            this.renderer.addClass(this.document.body, this.fixedClass);
        }
    }
};
AppBreadcrumbComponent.ɵfac = function AppBreadcrumbComponent_Factory(t) { return new (t || AppBreadcrumbComponent)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(AppBreadcrumbService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AppBreadcrumbComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppBreadcrumbComponent, selectors: [["app-breadcrumb"]], inputs: { fixed: "fixed" }, decls: 2, vars: 3, consts: [["ngFor", "", 3, "ngForOf"], ["class", "breadcrumb-item", 3, "ngClass", 4, "ngIf"], [1, "breadcrumb-item", 3, "ngClass"], [3, "routerLink", 4, "ngIf"], [3, "routerLink"]], template: function AppBreadcrumbComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, AppBreadcrumbComponent_ng_template_0_Template, 1, 1, "ng-template", 0);
        ɵngcc0.ɵɵpipe(1, "async");
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(1, 1, ctx.breadcrumbs));
    } }, directives: [ɵngcc2.NgForOf, ɵngcc2.NgIf, ɵngcc2.NgClass, ɵngcc1.RouterLinkWithHref, ɵngcc1.RouterLink], pipes: [ɵngcc2.AsyncPipe], encapsulation: 2 });
AppBreadcrumbComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 },
    { type: AppBreadcrumbService },
    { type: ElementRef }
];
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AppBreadcrumbComponent.prototype, "fixed", void 0);
AppBreadcrumbComponent = __decorate([ __param(0, Inject(DOCUMENT)),
    __metadata("design:paramtypes", [Object, Renderer2,
        AppBreadcrumbService,
        ElementRef])
], AppBreadcrumbComponent);

let CuiBreadcrumbComponent = class CuiBreadcrumbComponent {
    constructor(document, renderer, service) {
        this.document = document;
        this.renderer = renderer;
        this.service = service;
        this.fixedClass = 'breadcrumb-fixed';
    }
    ngOnInit() {
        this.isFixed(this.fixed);
        this.breadcrumbs = this.service.breadcrumbs;
    }
    ngOnDestroy() {
        this.renderer.removeClass(this.document.body, this.fixedClass);
    }
    isFixed(fixed = this.fixed) {
        if (fixed) {
            this.renderer.addClass(this.document.body, this.fixedClass);
        }
    }
};
CuiBreadcrumbComponent.ɵfac = function CuiBreadcrumbComponent_Factory(t) { return new (t || CuiBreadcrumbComponent)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(AppBreadcrumbService)); };
CuiBreadcrumbComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CuiBreadcrumbComponent, selectors: [["cui-breadcrumb"]], inputs: { fixed: "fixed" }, ngContentSelectors: _c0, decls: 4, vars: 3, consts: [[1, "breadcrumb"], ["ngFor", "", 3, "ngForOf"], ["class", "breadcrumb-item", 3, "ngClass", 4, "ngIf"], [1, "breadcrumb-item", 3, "ngClass"], [3, "routerLink", 4, "ngIf"], [3, "routerLink"]], template: function CuiBreadcrumbComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "ol", 0);
        ɵngcc0.ɵɵtemplate(1, CuiBreadcrumbComponent_ng_template_1_Template, 1, 1, "ng-template", 1);
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵprojection(3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(2, 1, ctx.breadcrumbs));
    } }, directives: [ɵngcc2.NgForOf, ɵngcc2.NgIf, ɵngcc2.NgClass, ɵngcc1.RouterLinkWithHref, ɵngcc1.RouterLink], pipes: [ɵngcc2.AsyncPipe], encapsulation: 2 });
CuiBreadcrumbComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 },
    { type: AppBreadcrumbService }
];
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], CuiBreadcrumbComponent.prototype, "fixed", void 0);
CuiBreadcrumbComponent = __decorate([ __param(0, Inject(DOCUMENT)),
    __metadata("design:paramtypes", [Object, Renderer2,
        AppBreadcrumbService])
], CuiBreadcrumbComponent);

var AppBreadcrumbModule_1;
// @dynamic
let AppBreadcrumbModule = AppBreadcrumbModule_1 = class AppBreadcrumbModule {
    static forRoot(config) {
        return {
            ngModule: AppBreadcrumbModule_1,
            providers: [
                AppBreadcrumbService
            ]
        };
    }
};
AppBreadcrumbModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AppBreadcrumbModule });
AppBreadcrumbModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AppBreadcrumbModule_Factory(t) { return new (t || AppBreadcrumbModule)(); }, imports: [[CommonModule, RouterModule]] });

let AppFooterComponent = class AppFooterComponent {
    constructor(document, renderer) {
        this.document = document;
        this.renderer = renderer;
        this.fixedClass = 'footer-fixed';
        this.appFooterClass = true;
    }
    ngOnInit() {
        this.isFixed(this.fixed);
    }
    ngOnDestroy() {
        this.renderer.removeClass(this.document.body, this.fixedClass);
    }
    isFixed(fixed = this.fixed) {
        if (fixed) {
            this.renderer.addClass(this.document.body, this.fixedClass);
        }
    }
};
AppFooterComponent.ɵfac = function AppFooterComponent_Factory(t) { return new (t || AppFooterComponent)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
AppFooterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppFooterComponent, selectors: [["app-footer"], ["cui-footer"]], hostVars: 2, hostBindings: function AppFooterComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("app-footer", ctx.appFooterClass);
    } }, inputs: { fixed: "fixed" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function AppFooterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
AppFooterComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 }
];
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AppFooterComponent.prototype, "fixed", void 0);
__decorate([
    HostBinding('class.app-footer'),
    __metadata("design:type", Object)
], AppFooterComponent.prototype, "appFooterClass", void 0);
AppFooterComponent = __decorate([ __param(0, Inject(DOCUMENT)),
    __metadata("design:paramtypes", [Object, Renderer2])
], AppFooterComponent);

let AppFooterModule = class AppFooterModule {
};
AppFooterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AppFooterModule });
AppFooterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AppFooterModule_Factory(t) { return new (t || AppFooterModule)(); }, imports: [[CommonModule]] });

let AppHeaderComponent = class AppHeaderComponent {
    constructor(document, renderer) {
        this.document = document;
        this.renderer = renderer;
        this.navbarBrandText = { icon: '🅲', text: '🅲 CoreUI' };
        this.navbarBrandRouterLink = '';
        this.fixedClass = 'header-fixed';
        this.appHeaderClass = true;
        this.navbarClass = true;
        this.breakpoints = ['xl', 'lg', 'md', 'sm', 'xs'];
        this.sidebarTogglerClass = 'd-none d-md-block';
        this.sidebarTogglerMobileClass = 'd-lg-none';
        this.asideTogglerClass = 'd-none d-md-block';
        this.asideTogglerMobileClass = 'd-lg-none';
    }
    ngOnInit() {
        this.isFixed(this.fixed);
        this.navbarBrandImg = Boolean(this.navbarBrand || this.navbarBrandFull || this.navbarBrandMinimized);
        this.navbarBrandRouterLink = this.navbarBrandRouterLink[0] ? this.navbarBrandRouterLink : this.navbarBrandHref;
        this.sidebarTogglerClass = this.setToggerBreakpointClass(this.sidebarToggler);
        this.sidebarTogglerMobileClass = this.setToggerMobileBreakpointClass(this.sidebarToggler);
        this.asideTogglerClass = this.setToggerBreakpointClass(this.asideMenuToggler);
        this.asideTogglerMobileClass = this.setToggerMobileBreakpointClass(this.asideMenuToggler);
    }
    ngOnDestroy() {
        this.renderer.removeClass(this.document.body, this.fixedClass);
    }
    isFixed(fixed = this.fixed) {
        if (fixed) {
            this.renderer.addClass(this.document.body, this.fixedClass);
        }
    }
    setToggerBreakpointClass(breakpoint = 'md') {
        let togglerClass = 'd-none d-md-block';
        if (this.breakpoints.includes(breakpoint)) {
            const breakpointIndex = this.breakpoints.indexOf(breakpoint);
            togglerClass = `d-none d-${breakpoint}-block`;
        }
        return togglerClass;
    }
    setToggerMobileBreakpointClass(breakpoint = 'lg') {
        let togglerClass = 'd-lg-none';
        if (this.breakpoints.includes(breakpoint)) {
            togglerClass = `d-${breakpoint}-none`;
        }
        return togglerClass;
    }
};
AppHeaderComponent.ɵfac = function AppHeaderComponent_Factory(t) { return new (t || AppHeaderComponent)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
AppHeaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppHeaderComponent, selectors: [["app-header"], ["cui-header"]], hostVars: 4, hostBindings: function AppHeaderComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("app-header", ctx.appHeaderClass)("navbar", ctx.navbarClass);
    } }, inputs: { navbarBrandText: "navbarBrandText", navbarBrandRouterLink: "navbarBrandRouterLink", fixed: "fixed", navbarBrand: "navbarBrand", navbarBrandFull: "navbarBrandFull", navbarBrandMinimized: "navbarBrandMinimized", navbarBrandHref: "navbarBrandHref", sidebarToggler: "sidebarToggler", mobileSidebarToggler: "mobileSidebarToggler", asideMenuToggler: "asideMenuToggler", mobileAsideMenuToggler: "mobileAsideMenuToggler" }, ngContentSelectors: _c0, decls: 8, vars: 7, consts: [[3, "ngIf"], [1, "navbar-brand", 3, "routerLink"], ["type", "button", "appSidebarToggler", ""], [1, "navbar-toggler-icon"], [3, "appHtmlAttr", "ngClass", 4, "ngIf"], [3, "appHtmlAttr", "ngClass"], [1, "navbar-brand-full", 3, "innerHTML"], [1, "navbar-brand-minimized", 3, "innerHTML"], ["type", "button", 3, "appSidebarToggler"], ["type", "button", 3, "appAsideMenuToggler"], ["type", "button", "appAsideMenuToggler", ""]], template: function AppHeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, AppHeaderComponent_ng_template_0_Template, 2, 3, "ng-template", 0);
        ɵngcc0.ɵɵelementStart(1, "a", 1);
        ɵngcc0.ɵɵtemplate(2, AppHeaderComponent_ng_template_2_Template, 3, 3, "ng-template", 0);
        ɵngcc0.ɵɵtemplate(3, AppHeaderComponent_ng_template_3_Template, 2, 2, "ng-template", 0);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, AppHeaderComponent_ng_template_4_Template, 2, 4, "ng-template", 0);
        ɵngcc0.ɵɵprojection(5);
        ɵngcc0.ɵɵtemplate(6, AppHeaderComponent_ng_template_6_Template, 2, 4, "ng-template", 0);
        ɵngcc0.ɵɵtemplate(7, AppHeaderComponent_ng_template_7_Template, 2, 3, "ng-template", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.mobileSidebarToggler != false);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("routerLink", ctx.navbarBrandRouterLink);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.navbarBrandImg);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.navbarBrandImg);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.sidebarToggler != false);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.asideMenuToggler != false);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.mobileAsideMenuToggler != false);
    } }, directives: [ɵngcc2.NgIf, ɵngcc1.RouterLinkWithHref, SidebarToggleDirective,
        HtmlAttributesDirective, ɵngcc2.NgClass, AsideToggleDirective], encapsulation: 2 });
AppHeaderComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 }
];
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AppHeaderComponent.prototype, "fixed", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AppHeaderComponent.prototype, "navbarBrand", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AppHeaderComponent.prototype, "navbarBrandFull", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AppHeaderComponent.prototype, "navbarBrandMinimized", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AppHeaderComponent.prototype, "navbarBrandText", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], AppHeaderComponent.prototype, "navbarBrandHref", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AppHeaderComponent.prototype, "navbarBrandRouterLink", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AppHeaderComponent.prototype, "sidebarToggler", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AppHeaderComponent.prototype, "mobileSidebarToggler", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AppHeaderComponent.prototype, "asideMenuToggler", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AppHeaderComponent.prototype, "mobileAsideMenuToggler", void 0);
__decorate([
    HostBinding('class.app-header'),
    __metadata("design:type", Object)
], AppHeaderComponent.prototype, "appHeaderClass", void 0);
__decorate([
    HostBinding('class.navbar'),
    __metadata("design:type", Object)
], AppHeaderComponent.prototype, "navbarClass", void 0);
AppHeaderComponent = __decorate([ __param(0, Inject(DOCUMENT)),
    __metadata("design:paramtypes", [Object, Renderer2])
], AppHeaderComponent);

let AppHeaderModule = class AppHeaderModule {
};
AppHeaderModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AppHeaderModule });
AppHeaderModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AppHeaderModule_Factory(t) { return new (t || AppHeaderModule)(); }, imports: [[
            CommonModule,
            RouterModule,
            LayoutModule
        ],
        LayoutModule] });

let AppSidebarService = class AppSidebarService {
    constructor() {
        this.events = new BehaviorSubject({});
        this.events$ = this.events.asObservable();
    }
    toggle(action) {
        this.events.next(action);
    }
};
AppSidebarService.ɵfac = function AppSidebarService_Factory(t) { return new (t || AppSidebarService)(); };
AppSidebarService.ɵprov = ɵɵdefineInjectable({ factory: function AppSidebarService_Factory() { return new AppSidebarService(); }, token: AppSidebarService, providedIn: "root" });
AppSidebarService = __decorate([ __metadata("design:paramtypes", [])
], AppSidebarService);

let AppSidebarComponent = class AppSidebarComponent {
    constructor(document, renderer, sidebarService) {
        this.document = document;
        this.renderer = renderer;
        this.sidebarService = sidebarService;
        this._minimized = false;
        /**
         * Emits whenever the minimized state of the sidebar changes.
         * Primarily used to facilitate two-way binding.
         */
        this.minimizedChange = new EventEmitter();
        this.sidebarClass = true;
    }
    get minimized() {
        return this._minimized;
    }
    set minimized(value) {
        // only update / emit events when the value changes
        if (this._minimized !== value) {
            this._minimized = value;
            this._updateMinimized(value);
            this.minimizedChange.emit(value);
            this.sidebarService.toggle({ minimize: value });
        }
    }
    ngOnInit() {
        this.displayBreakpoint(this.display);
        this.isCompact(this.compact);
        this.isFixed(this.fixed);
        this.isOffCanvas(this.offCanvas);
        this.sidebarService.toggle({ minimize: this.minimized });
        this.subscriptionEvents = this.sidebarService.events$.subscribe(action => {
            if (action.minimize !== undefined) {
                action.minimize === 'toggle' ? this.toggleMinimized() : this.minimized = !!action.minimize;
            }
        });
    }
    ngOnDestroy() {
        this.subscriptionEvents.unsubscribe();
        this.minimizedChange.complete();
        this.renderer.removeClass(this.document.body, 'sidebar-fixed');
        this._updateMinimized(false);
    }
    isCompact(compact = this.compact) {
        if (compact) {
            this.renderer.addClass(this.document.body, 'sidebar-compact');
        }
    }
    isFixed(fixed = this.fixed) {
        if (fixed) {
            this.renderer.addClass(this.document.body, 'sidebar-fixed');
        }
    }
    toggleMinimized() {
        this.minimized = !this._minimized;
    }
    isOffCanvas(offCanvas = this.offCanvas) {
        if (offCanvas) {
            this.renderer.addClass(this.document.body, 'sidebar-off-canvas');
        }
    }
    displayBreakpoint(display = this.display) {
        if (display !== false) {
            const cssClass = display ? `sidebar-${display}-show` : sidebarCssClasses[0];
            this.renderer.addClass(this.document.body, cssClass);
        }
    }
    _updateMinimized(minimized) {
        const body = this.document.body;
        if (minimized) {
            this.renderer.addClass(body, 'sidebar-minimized');
            this.renderer.addClass(body, 'brand-minimized');
        }
        else {
            this.renderer.removeClass(body, 'sidebar-minimized');
            this.renderer.removeClass(body, 'brand-minimized');
        }
    }
};
AppSidebarComponent.ɵfac = function AppSidebarComponent_Factory(t) { return new (t || AppSidebarComponent)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(AppSidebarService)); };
AppSidebarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppSidebarComponent, selectors: [["app-sidebar"], ["cui-sidebar"]], hostVars: 2, hostBindings: function AppSidebarComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("sidebar", ctx.sidebarClass);
    } }, inputs: { minimized: "minimized", compact: "compact", display: "display", fixed: "fixed", offCanvas: "offCanvas" }, outputs: { minimizedChange: "minimizedChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function AppSidebarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
AppSidebarComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 },
    { type: AppSidebarService }
];
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AppSidebarComponent.prototype, "compact", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AppSidebarComponent.prototype, "display", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AppSidebarComponent.prototype, "fixed", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AppSidebarComponent.prototype, "offCanvas", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], AppSidebarComponent.prototype, "minimized", null);
__decorate([
    Output(),
    __metadata("design:type", Object)
], AppSidebarComponent.prototype, "minimizedChange", void 0);
__decorate([
    HostBinding('class.sidebar'),
    __metadata("design:type", Object)
], AppSidebarComponent.prototype, "sidebarClass", void 0);
AppSidebarComponent = __decorate([ __param(0, Inject(DOCUMENT)),
    __metadata("design:paramtypes", [Object, Renderer2,
        AppSidebarService])
], AppSidebarComponent);

let SidebarNavService = class SidebarNavService {
};
SidebarNavService.ɵfac = function SidebarNavService_Factory(t) { return new (t || SidebarNavService)(); };
SidebarNavService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SidebarNavService, factory: SidebarNavService.ɵfac });
let SidebarNavHelper = class SidebarNavHelper {
    constructor() {
        this.hasBadge = (item) => Boolean(item.badge);
        this.hasIcon = (item) => Boolean(item.icon);
    }
    itemType(item) {
        if (item.divider) {
            return 'divider';
        }
        else if (item.title) {
            return 'title';
        }
        else if (item.children) {
            return 'dropdown';
        }
        else if (item.label) {
            return 'label';
        }
        else if (!Object.keys(item).length) {
            return 'empty';
        }
        else {
            return 'link';
        }
    }
    isActive(router, item) {
        return router.isActive(item.url, false);
    }
    getIconClass(item) {
        const classes = {
            'nav-icon': true
        };
        if (this.hasIcon(item)) {
            const icon = item.icon;
            classes[icon] = this.hasIcon(item);
        }
        return classes;
    }
};
SidebarNavHelper.ɵfac = function SidebarNavHelper_Factory(t) { return new (t || SidebarNavHelper)(); };
SidebarNavHelper.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SidebarNavHelper, factory: SidebarNavHelper.ɵfac });

let AppSidebarFooterComponent = class AppSidebarFooterComponent {
    constructor() {
        this.sidebarFooterClass = true;
    }
};
AppSidebarFooterComponent.ɵfac = function AppSidebarFooterComponent_Factory(t) { return new (t || AppSidebarFooterComponent)(); };
AppSidebarFooterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppSidebarFooterComponent, selectors: [["app-sidebar-footer"], ["cui-sidebar-footer"]], hostVars: 2, hostBindings: function AppSidebarFooterComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("sidebar-footer", ctx.sidebarFooterClass);
    } }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function AppSidebarFooterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
__decorate([
    HostBinding('class.sidebar-footer'),
    __metadata("design:type", Object)
], AppSidebarFooterComponent.prototype, "sidebarFooterClass", void 0);
AppSidebarFooterComponent = __decorate([ __metadata("design:paramtypes", [])
], AppSidebarFooterComponent);

let AppSidebarFormComponent = class AppSidebarFormComponent {
    constructor() {
        this.sidebarFormClass = true;
    }
};
AppSidebarFormComponent.ɵfac = function AppSidebarFormComponent_Factory(t) { return new (t || AppSidebarFormComponent)(); };
AppSidebarFormComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppSidebarFormComponent, selectors: [["app-sidebar-form"], ["cui-sidebar-form"]], hostVars: 2, hostBindings: function AppSidebarFormComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("sidebar-form", ctx.sidebarFormClass);
    } }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function AppSidebarFormComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
__decorate([
    HostBinding('class.sidebar-form'),
    __metadata("design:type", Object)
], AppSidebarFormComponent.prototype, "sidebarFormClass", void 0);
AppSidebarFormComponent = __decorate([ __metadata("design:paramtypes", [])
], AppSidebarFormComponent);

let AppSidebarHeaderComponent = class AppSidebarHeaderComponent {
    constructor() {
        this.sidebarHeaderClass = true;
    }
};
AppSidebarHeaderComponent.ɵfac = function AppSidebarHeaderComponent_Factory(t) { return new (t || AppSidebarHeaderComponent)(); };
AppSidebarHeaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppSidebarHeaderComponent, selectors: [["app-sidebar-header"], ["cui-sidebar-header"]], hostVars: 2, hostBindings: function AppSidebarHeaderComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("sidebar-header", ctx.sidebarHeaderClass);
    } }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function AppSidebarHeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
__decorate([
    HostBinding('class.sidebar-header'),
    __metadata("design:type", Object)
], AppSidebarHeaderComponent.prototype, "sidebarHeaderClass", void 0);
AppSidebarHeaderComponent = __decorate([ __metadata("design:paramtypes", [])
], AppSidebarHeaderComponent);

let AppSidebarMinimizerComponent = class AppSidebarMinimizerComponent {
    constructor(sidebarService) {
        this.sidebarService = sidebarService;
        this.role = 'button';
        this.sidebarMinimizerClass = true;
    }
    toggleOpen($event) {
        $event.preventDefault();
        this.sidebarService.toggle({ minimize: 'toggle' });
    }
};
AppSidebarMinimizerComponent.ɵfac = function AppSidebarMinimizerComponent_Factory(t) { return new (t || AppSidebarMinimizerComponent)(ɵngcc0.ɵɵdirectiveInject(AppSidebarService)); };
AppSidebarMinimizerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppSidebarMinimizerComponent, selectors: [["app-sidebar-minimizer"], ["cui-sidebar-minimizer"]], hostVars: 3, hostBindings: function AppSidebarMinimizerComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function AppSidebarMinimizerComponent_click_HostBindingHandler($event) { return ctx.toggleOpen($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx.role);
        ɵngcc0.ɵɵclassProp("sidebar-minimizer", ctx.sidebarMinimizerClass);
    } }, inputs: { role: "role" }, decls: 0, vars: 0, template: function AppSidebarMinimizerComponent_Template(rf, ctx) { }, encapsulation: 2 });
AppSidebarMinimizerComponent.ctorParameters = () => [
    { type: AppSidebarService }
];
__decorate([
    HostBinding('attr.role'), Input(),
    __metadata("design:type", Object)
], AppSidebarMinimizerComponent.prototype, "role", void 0);
__decorate([
    HostBinding('class.sidebar-minimizer'),
    __metadata("design:type", Object)
], AppSidebarMinimizerComponent.prototype, "sidebarMinimizerClass", void 0);
__decorate([
    HostListener('click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AppSidebarMinimizerComponent.prototype, "toggleOpen", null);
AppSidebarMinimizerComponent = __decorate([ __metadata("design:paramtypes", [AppSidebarService])
], AppSidebarMinimizerComponent);

let NavDropdownDirective = class NavDropdownDirective {
    constructor(el) {
        this.el = el;
    }
    toggle() {
        this.el.nativeElement.classList.toggle('open');
    }
};
NavDropdownDirective.ɵfac = function NavDropdownDirective_Factory(t) { return new (t || NavDropdownDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
NavDropdownDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NavDropdownDirective, selectors: [["", "appNavDropdown", ""]] });
NavDropdownDirective.ctorParameters = () => [
    { type: ElementRef }
];
NavDropdownDirective = __decorate([ __metadata("design:paramtypes", [ElementRef])
], NavDropdownDirective);
/**
 * Allows the dropdown to be toggled via click.
 */
let NavDropdownToggleDirective = class NavDropdownToggleDirective {
    constructor(dropdown) {
        this.dropdown = dropdown;
    }
    toggleOpen($event) {
        $event.preventDefault();
        this.dropdown.toggle();
    }
};
NavDropdownToggleDirective.ɵfac = function NavDropdownToggleDirective_Factory(t) { return new (t || NavDropdownToggleDirective)(ɵngcc0.ɵɵdirectiveInject(NavDropdownDirective)); };
NavDropdownToggleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NavDropdownToggleDirective, selectors: [["", "appNavDropdownToggle", ""]], hostBindings: function NavDropdownToggleDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NavDropdownToggleDirective_click_HostBindingHandler($event) { return ctx.toggleOpen($event); });
    } } });
NavDropdownToggleDirective.ctorParameters = () => [
    { type: NavDropdownDirective }
];
__decorate([
    HostListener('click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], NavDropdownToggleDirective.prototype, "toggleOpen", null);
NavDropdownToggleDirective = __decorate([ __metadata("design:paramtypes", [NavDropdownDirective])
], NavDropdownToggleDirective);

let AppSidebarNavComponent = class AppSidebarNavComponent {
    constructor(router) {
        this.router = router;
        this.navItems = [];
        this.sidebarNavClass = true;
        this.role = 'nav';
        this.navItemsArray = [];
    }
    ngOnChanges(changes) {
        this.navItemsArray = Array.isArray(this.navItems) ? this.navItems.slice() : [];
    }
};
AppSidebarNavComponent.ɵfac = function AppSidebarNavComponent_Factory(t) { return new (t || AppSidebarNavComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Router)); };
AppSidebarNavComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppSidebarNavComponent, selectors: [["app-sidebar-nav"], ["cui-sidebar-nav"]], hostVars: 3, hostBindings: function AppSidebarNavComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx.role);
        ɵngcc0.ɵɵclassProp("sidebar-nav", ctx.sidebarNavClass);
    } }, inputs: { navItems: "navItems", role: "role" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[1, "nav", 3, "items"]], template: function AppSidebarNavComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "app-sidebar-nav-items", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("items", ctx.navItemsArray);
    } }, directives: function () { return [AppSidebarNavItemsComponent]; }, encapsulation: 2 });
AppSidebarNavComponent.ctorParameters = () => [
    { type: Router }
];
__decorate([
    Input(),
    __metadata("design:type", Array)
], AppSidebarNavComponent.prototype, "navItems", void 0);
__decorate([
    HostBinding('class.sidebar-nav'),
    __metadata("design:type", Object)
], AppSidebarNavComponent.prototype, "sidebarNavClass", void 0);
__decorate([
    HostBinding('attr.role'), Input(),
    __metadata("design:type", Object)
], AppSidebarNavComponent.prototype, "role", void 0);
AppSidebarNavComponent = __decorate([ __metadata("design:paramtypes", [Router])
], AppSidebarNavComponent);

let AppSidebarNavDividerComponent = class AppSidebarNavDividerComponent {
    constructor() { }
    ngOnInit() { }
};
AppSidebarNavDividerComponent.ɵfac = function AppSidebarNavDividerComponent_Factory(t) { return new (t || AppSidebarNavDividerComponent)(); };
AppSidebarNavDividerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppSidebarNavDividerComponent, selectors: [["app-sidebar-nav-divider"], ["cui-sidebar-nav-divider"]], inputs: { item: "item" }, decls: 0, vars: 0, template: function AppSidebarNavDividerComponent_Template(rf, ctx) { }, encapsulation: 2 });
__decorate([
    Input(),
    __metadata("design:type", Object)
], AppSidebarNavDividerComponent.prototype, "item", void 0);
AppSidebarNavDividerComponent = __decorate([ __metadata("design:paramtypes", [])
], AppSidebarNavDividerComponent);

let AppSidebarNavDropdownComponent = class AppSidebarNavDropdownComponent {
    constructor(helper) {
        this.helper = helper;
    }
};
AppSidebarNavDropdownComponent.ɵfac = function AppSidebarNavDropdownComponent_Factory(t) { return new (t || AppSidebarNavDropdownComponent)(ɵngcc0.ɵɵdirectiveInject(SidebarNavHelper)); };
AppSidebarNavDropdownComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppSidebarNavDropdownComponent, selectors: [["app-sidebar-nav-dropdown"], ["cui-sidebar-nav-dropdown"]], inputs: { item: "item" }, features: [ɵngcc0.ɵɵProvidersFeature([SidebarNavHelper])], decls: 6, vars: 5, consts: [["appNavDropdownToggle", "", 1, "nav-link", "nav-dropdown-toggle", 3, "appHtmlAttr"], [3, "ngClass", 4, "ngIf"], [1, "nav-dropdown-items", 3, "items"], [3, "ngClass"]], template: function AppSidebarNavDropdownComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "a", 0);
        ɵngcc0.ɵɵtemplate(1, AppSidebarNavDropdownComponent_i_1_Template, 2, 3, "i", 1);
        ɵngcc0.ɵɵelementContainerStart(2);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵtemplate(4, AppSidebarNavDropdownComponent_span_4_Template, 3, 4, "span", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(5, "app-sidebar-nav-items", 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("appHtmlAttr", ctx.item.attributes);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.helper.hasIcon(ctx.item));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.item.name);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.helper.hasBadge(ctx.item));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("items", ctx.item.children);
    } }, directives: function () { return [NavDropdownToggleDirective,
        HtmlAttributesDirective, ɵngcc2.NgIf, AppSidebarNavItemsComponent, ɵngcc2.NgClass]; }, pipes: function () { return [AppSidebarNavIconPipe,
        AppSidebarNavBadgePipe]; }, styles: [".nav-dropdown-toggle[_ngcontent-%COMP%] { cursor: pointer; }", ".nav-dropdown-items[_ngcontent-%COMP%] { display: block; }"] });
AppSidebarNavDropdownComponent.ctorParameters = () => [
    { type: SidebarNavHelper }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], AppSidebarNavDropdownComponent.prototype, "item", void 0);
AppSidebarNavDropdownComponent = __decorate([ __metadata("design:paramtypes", [SidebarNavHelper])
], AppSidebarNavDropdownComponent);

let AppSidebarNavItemsComponent = class AppSidebarNavItemsComponent {
    constructor(document, renderer, router, helper) {
        this.document = document;
        this.renderer = renderer;
        this.router = router;
        this.helper = helper;
    }
    set items(items) {
        this._items = [...items];
    }
    get items() {
        return this._items;
    }
    hideMobile() {
        if (this.document.body.classList.contains('sidebar-show')) {
            this.renderer.removeClass(this.document.body, 'sidebar-show');
        }
    }
};
AppSidebarNavItemsComponent.ɵfac = function AppSidebarNavItemsComponent_Factory(t) { return new (t || AppSidebarNavItemsComponent)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Router), ɵngcc0.ɵɵdirectiveInject(SidebarNavHelper)); };
AppSidebarNavItemsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppSidebarNavItemsComponent, selectors: [["app-sidebar-nav-items"], ["cui-sidebar-nav-items"]], inputs: { items: "items" }, decls: 1, vars: 1, consts: [[4, "ngFor", "ngForOf"], [3, "ngSwitch"], ["appNavDropdown", "", "routerLinkActive", "open", 3, "item", "open", "ngClass", 4, "ngSwitchCase"], [3, "item", "ngClass", "appHtmlAttr", 4, "ngSwitchCase"], ["class", "nav-item", 3, "item", "ngClass", 4, "ngSwitchCase"], [4, "ngSwitchCase"], ["class", "nav-item", 3, "item", "ngClass", "linkClick", 4, "ngSwitchDefault"], ["appNavDropdown", "", "routerLinkActive", "open", 3, "item", "ngClass"], [3, "item", "ngClass", "appHtmlAttr"], [1, "nav-item", 3, "item", "ngClass"], [1, "nav-item", 3, "item", "ngClass", "linkClick"]], template: function AppSidebarNavItemsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, AppSidebarNavItemsComponent_ng_container_0_Template, 8, 6, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.items);
    } }, directives: function () { return [ɵngcc2.NgForOf, ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase, ɵngcc2.NgSwitchDefault, AppSidebarNavDropdownComponent,
        NavDropdownDirective, ɵngcc1.RouterLinkActive, ɵngcc2.NgClass, AppSidebarNavDividerComponent,
        HtmlAttributesDirective,
        AppSidebarNavTitleComponent,
        AppSidebarNavLabelComponent,
        AppSidebarNavLinkComponent]; }, pipes: function () { return [AppSidebarNavItemClassPipe]; }, encapsulation: 2 });
AppSidebarNavItemsComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 },
    { type: Router },
    { type: SidebarNavHelper }
];
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], AppSidebarNavItemsComponent.prototype, "items", null);
AppSidebarNavItemsComponent = __decorate([ __param(0, Inject(DOCUMENT)),
    __metadata("design:paramtypes", [Object, Renderer2,
        Router,
        SidebarNavHelper])
], AppSidebarNavItemsComponent);

let AppSidebarNavLinkContentComponent = class AppSidebarNavLinkContentComponent {
    constructor(helper) {
        this.helper = helper;
    }
    ngOnInit() { }
    ngOnDestroy() { }
};
AppSidebarNavLinkContentComponent.ɵfac = function AppSidebarNavLinkContentComponent_Factory(t) { return new (t || AppSidebarNavLinkContentComponent)(ɵngcc0.ɵɵdirectiveInject(SidebarNavHelper)); };
AppSidebarNavLinkContentComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppSidebarNavLinkContentComponent, selectors: [["app-sidebar-nav-link-content"], ["cui-sidebar-nav-link-content"]], inputs: { item: "item" }, features: [ɵngcc0.ɵɵProvidersFeature([SidebarNavHelper])], decls: 1, vars: 1, consts: [[4, "ngIf"], [3, "ngClass", 4, "ngIf"], [3, "ngClass"]], template: function AppSidebarNavLinkContentComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, AppSidebarNavLinkContentComponent_ng_container_0_Template, 5, 3, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", true);
    } }, directives: function () { return [ɵngcc2.NgIf, ɵngcc2.NgClass]; }, pipes: function () { return [AppSidebarNavIconPipe,
        AppSidebarNavBadgePipe]; }, encapsulation: 2 });
AppSidebarNavLinkContentComponent.ctorParameters = () => [
    { type: SidebarNavHelper }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], AppSidebarNavLinkContentComponent.prototype, "item", void 0);
AppSidebarNavLinkContentComponent = __decorate([ __metadata("design:paramtypes", [SidebarNavHelper])
], AppSidebarNavLinkContentComponent);
let AppSidebarNavLinkComponent = class AppSidebarNavLinkComponent {
    constructor(router) {
        this.router = router;
        this.linkClick = new EventEmitter();
        this.navigationEndObservable = router.events.pipe(filter(event => {
            return event instanceof NavigationEnd;
        }));
    }
    set item(item) {
        this._Item = JSON.parse(JSON.stringify(item));
    }
    get item() {
        return this._Item;
    }
    ngOnInit() {
        this.url = typeof this.item.url === 'string' ? this.item.url : this.router.serializeUrl(this.router.createUrlTree(this.item.url));
        this.linkType = this.getLinkType();
        this.href = this.isDisabled() ? '' : (this.item.href || this.url);
        this.linkActive = this.router.url.split(/[?#(;]/)[0] === this.href.split(/[?#(;]/)[0];
        this.navSubscription = this.navigationEndObservable.subscribe(event => {
            const itemUrlArray = this.href.split(/[?#(;]/)[0].split('/');
            const urlArray = event.urlAfterRedirects.split(/[?#(;]/)[0].split('/');
            this.linkActive = itemUrlArray.every((value, index) => value === urlArray[index]);
        });
    }
    ngOnDestroy() {
        this.navSubscription.unsubscribe();
    }
    getLinkType() {
        return this.isDisabled() ? 'disabled' : this.isExternalLink() ? 'external' : 'link';
    }
    isDisabled() {
        return (this.item.attributes && this.item.attributes.disabled) ? true : null;
    }
    isExternalLink() {
        return !!this.item.href || this.url.substring(0, 4) === 'http';
    }
    linkClicked() {
        this.linkClick.emit();
    }
};
AppSidebarNavLinkComponent.ɵfac = function AppSidebarNavLinkComponent_Factory(t) { return new (t || AppSidebarNavLinkComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Router)); };
AppSidebarNavLinkComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppSidebarNavLinkComponent, selectors: [["app-sidebar-nav-link"], ["cui-sidebar-nav-link"]], inputs: { item: "item" }, outputs: { linkClick: "linkClick" }, features: [ɵngcc0.ɵɵProvidersFeature([SidebarNavHelper])], decls: 4, vars: 3, consts: [[3, "ngSwitch"], [3, "ngClass", "appHtmlAttr", 4, "ngSwitchCase"], [3, "ngClass", "href", "appHtmlAttr", "click", 4, "ngSwitchCase"], [3, "ngClass", "appHtmlAttr", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "routerLink", "active", "click", 4, "ngSwitchDefault"], [3, "ngClass", "appHtmlAttr"], [3, "item"], [3, "ngClass", "href", "appHtmlAttr", "click"], [3, "ngClass", "appHtmlAttr", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "routerLink", "click"]], template: function AppSidebarNavLinkComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, 0);
        ɵngcc0.ɵɵtemplate(1, AppSidebarNavLinkComponent_a_1_Template, 3, 5, "a", 1);
        ɵngcc0.ɵɵtemplate(2, AppSidebarNavLinkComponent_a_2_Template, 3, 6, "a", 2);
        ɵngcc0.ɵɵtemplate(3, AppSidebarNavLinkComponent_a_3_Template, 3, 16, "a", 3);
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngSwitch", ctx.linkType);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "disabled");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "external");
    } }, directives: function () { return [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase, ɵngcc2.NgSwitchDefault, ɵngcc2.NgClass, HtmlAttributesDirective,
        AppSidebarNavLinkContentComponent, ɵngcc1.RouterLinkWithHref]; }, pipes: function () { return [AppSidebarNavLinkPipe]; }, encapsulation: 2 });
AppSidebarNavLinkComponent.ctorParameters = () => [
    { type: Router }
];
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], AppSidebarNavLinkComponent.prototype, "item", null);
__decorate([
    Output(),
    __metadata("design:type", Object)
], AppSidebarNavLinkComponent.prototype, "linkClick", void 0);
AppSidebarNavLinkComponent = __decorate([ __metadata("design:paramtypes", [Router])
], AppSidebarNavLinkComponent);

let AppSidebarNavTitleComponent = class AppSidebarNavTitleComponent {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
    }
    ngOnInit() {
        const nativeElement = this.el.nativeElement;
        const name = this.renderer.createText(this.item.name);
        if (this.item.class) {
            const classes = this.item.class;
            this.renderer.addClass(nativeElement, classes);
        }
        if (this.item.wrapper) {
            const wrapper = this.renderer.createElement(this.item.wrapper.element);
            this.addAttribs(this.item.wrapper.attributes, wrapper);
            this.renderer.appendChild(wrapper, name);
            this.renderer.appendChild(nativeElement, wrapper);
        }
        else {
            this.renderer.appendChild(nativeElement, name);
        }
    }
    addAttribs(attribs, element) {
        if (attribs) {
            for (const attr in attribs) {
                if (attr === 'style' && typeof (attribs[attr]) === 'object') {
                    this.setStyle(attribs[attr], element);
                }
                else if (attr === 'class') {
                    this.addClass(attribs[attr], element);
                }
                else {
                    this.setAttrib(attr, attribs[attr], element);
                }
            }
        }
    }
    setStyle(styles, el) {
        for (const style in styles) {
            this.renderer.setStyle(el, style, styles[style]);
        }
    }
    addClass(classes, el) {
        const classArray = (Array.isArray(classes) ? classes : classes.split(' '));
        classArray.filter((element) => element.length > 0).forEach(element => {
            this.renderer.addClass(el, element);
        });
    }
    setAttrib(key, value, el) {
        this.renderer.setAttribute(el, key, value);
    }
};
AppSidebarNavTitleComponent.ɵfac = function AppSidebarNavTitleComponent_Factory(t) { return new (t || AppSidebarNavTitleComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
AppSidebarNavTitleComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppSidebarNavTitleComponent, selectors: [["app-sidebar-nav-title"], ["cui-sidebar-nav-title"]], inputs: { item: "item" }, decls: 0, vars: 0, template: function AppSidebarNavTitleComponent_Template(rf, ctx) { }, encapsulation: 2 });
AppSidebarNavTitleComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], AppSidebarNavTitleComponent.prototype, "item", void 0);
AppSidebarNavTitleComponent = __decorate([ __metadata("design:paramtypes", [ElementRef,
        Renderer2])
], AppSidebarNavTitleComponent);

let AppSidebarNavLabelComponent = class AppSidebarNavLabelComponent {
    constructor(helper) {
        this.helper = helper;
        this.classes = {
            'nav-label': true,
            active: true
        };
        this.iconClasses = {};
    }
    ngOnInit() {
        this.iconClasses = this.helper.getIconClass(this.item);
    }
    getItemClass() {
        const itemClass = this.item.class;
        this.classes[itemClass] = !!itemClass;
        return this.classes;
    }
    getLabelIconClass() {
        const variant = `text-${this.item.label.variant}`;
        this.iconClasses[variant] = !!this.item.label.variant;
        const labelClass = this.item.label.class;
        this.iconClasses[labelClass] = !!labelClass;
        return this.iconClasses;
    }
};
AppSidebarNavLabelComponent.ɵfac = function AppSidebarNavLabelComponent_Factory(t) { return new (t || AppSidebarNavLabelComponent)(ɵngcc0.ɵɵdirectiveInject(SidebarNavHelper)); };
AppSidebarNavLabelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppSidebarNavLabelComponent, selectors: [["app-sidebar-nav-label"], ["cui-sidebar-nav-label"]], inputs: { item: "item" }, decls: 5, vars: 6, consts: [[3, "ngClass", "href", "appHtmlAttr"], [3, "ngClass", 4, "ngIf"], [3, "ngClass"]], template: function AppSidebarNavLabelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "a", 0);
        ɵngcc0.ɵɵtemplate(1, AppSidebarNavLabelComponent_i_1_Template, 1, 1, "i", 1);
        ɵngcc0.ɵɵelementContainerStart(2);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵtemplate(4, AppSidebarNavLabelComponent_span_4_Template, 3, 4, "span", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("href", ctx.item.url, ɵngcc0.ɵɵsanitizeUrl);
        ɵngcc0.ɵɵproperty("ngClass", ctx.getItemClass())("appHtmlAttr", ctx.item.attributes);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.helper.hasIcon(ctx.item));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.item.name);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.helper.hasBadge(ctx.item));
    } }, directives: function () { return [ɵngcc2.NgClass, HtmlAttributesDirective, ɵngcc2.NgIf]; }, pipes: function () { return [AppSidebarNavBadgePipe]; }, encapsulation: 2 });
AppSidebarNavLabelComponent.ctorParameters = () => [
    { type: SidebarNavHelper }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], AppSidebarNavLabelComponent.prototype, "item", void 0);
AppSidebarNavLabelComponent = __decorate([ __metadata("design:paramtypes", [SidebarNavHelper])
], AppSidebarNavLabelComponent);

let AppSidebarNavIconPipe = class AppSidebarNavIconPipe {
    transform(item, args) {
        const classes = {
            'nav-icon': true
        };
        const icon = item.icon;
        classes[icon] = !!item.icon;
        return classes;
    }
};
AppSidebarNavIconPipe.ɵfac = function AppSidebarNavIconPipe_Factory(t) { return new (t || AppSidebarNavIconPipe)(); };
AppSidebarNavIconPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "appSidebarNavIcon", type: AppSidebarNavIconPipe, pure: true });

let AppSidebarNavBadgePipe = class AppSidebarNavBadgePipe {
    transform(item, args) {
        const classes = {
            badge: true
        };
        const variant = `badge-${item.badge.variant}`;
        classes[variant] = !!item.badge.variant;
        classes[item.badge.class] = !!item.badge.class;
        return classes;
    }
};
AppSidebarNavBadgePipe.ɵfac = function AppSidebarNavBadgePipe_Factory(t) { return new (t || AppSidebarNavBadgePipe)(); };
AppSidebarNavBadgePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "appSidebarNavBadge", type: AppSidebarNavBadgePipe, pure: true });

let AppSidebarNavLinkPipe = class AppSidebarNavLinkPipe {
    transform(item) {
        const classes = { 'nav-link': true };
        const disabled = item.attributes && item.attributes.disabled;
        classes['disabled'] = disabled;
        classes['btn-link'] = disabled;
        classes[`nav-link-${item.variant}`] = !!item.variant;
        return classes;
    }
};
AppSidebarNavLinkPipe.ɵfac = function AppSidebarNavLinkPipe_Factory(t) { return new (t || AppSidebarNavLinkPipe)(); };
AppSidebarNavLinkPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "appSidebarNavLink", type: AppSidebarNavLinkPipe, pure: true });

let AppSidebarNavItemClassPipe = class AppSidebarNavItemClassPipe {
    constructor(helper) {
        this.helper = helper;
    }
    transform(item, ...args) {
        const itemType = this.helper.itemType(item);
        let itemClass;
        if (['divider', 'title'].includes(itemType)) {
            itemClass = `nav-${itemType}`;
        }
        else if (itemType === 'dropdown') {
            itemClass = 'nav-item nav-dropdown';
        }
        else {
            itemClass = 'nav-item';
        }
        return item.class ? `${itemClass} ${item.class}` : itemClass;
    }
};
AppSidebarNavItemClassPipe.ɵfac = function AppSidebarNavItemClassPipe_Factory(t) { return new (t || AppSidebarNavItemClassPipe)(ɵngcc0.ɵɵdirectiveInject(SidebarNavHelper)); };
AppSidebarNavItemClassPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "appSidebarNavItemClass", type: AppSidebarNavItemClassPipe, pure: true });
AppSidebarNavItemClassPipe.ctorParameters = () => [
    { type: SidebarNavHelper }
];
AppSidebarNavItemClassPipe = __decorate([ __metadata("design:paramtypes", [SidebarNavHelper])
], AppSidebarNavItemClassPipe);

let AppSidebarModule = class AppSidebarModule {
};
AppSidebarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AppSidebarModule });
AppSidebarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AppSidebarModule_Factory(t) { return new (t || AppSidebarModule)(); }, providers: [
        SidebarNavHelper,
        AppSidebarService
    ], imports: [[
            CommonModule,
            RouterModule,
            LayoutModule
        ],
        LayoutModule] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClassToggler, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.Renderer2 }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SidebarToggleDirective, [{
        type: Directive,
        args: [{
                selector: '[appSidebarToggler]',
                providers: [ClassToggler]
            }]
    }], function () { return [{ type: ClassToggler }]; }, { toggleOpen: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], breakpoint: [{
            type: Input,
            args: ['appSidebarToggler']
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SidebarMinimizeDirective, [{
        type: Directive,
        args: [{
                selector: '[appSidebarMinimizer]'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.Renderer2 }]; }, { toggleOpen: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MobileSidebarToggleDirective, [{
        type: Directive,
        args: [{
                selector: '[appMobileSidebarToggler]'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.Renderer2 }]; }, { toggleOpen: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SidebarOffCanvasCloseDirective, [{
        type: Directive,
        args: [{
                selector: '[appSidebarClose]'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.Renderer2 }]; }, { toggleOpen: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BrandMinimizeDirective, [{
        type: Directive,
        args: [{
                selector: '[appBrandMinimizer]'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.Renderer2 }]; }, { toggleOpen: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AsideToggleDirective, [{
        type: Directive,
        args: [{
                selector: '[appAsideMenuToggler]',
                providers: [ClassToggler]
            }]
    }], function () { return [{ type: ClassToggler }]; }, { toggleOpen: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], breakpoint: [{
            type: Input,
            args: ['appAsideMenuToggler']
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HtmlAttributesDirective, [{
        type: Directive,
        args: [{
                selector: '[appHtmlAttr]'
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { appHtmlAttr: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LayoutModule, { declarations: function () { return [AsideToggleDirective,
        BrandMinimizeDirective,
        MobileSidebarToggleDirective,
        SidebarToggleDirective,
        SidebarMinimizeDirective,
        SidebarOffCanvasCloseDirective,
        HtmlAttributesDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [AsideToggleDirective,
        BrandMinimizeDirective,
        MobileSidebarToggleDirective,
        SidebarToggleDirective,
        SidebarMinimizeDirective,
        SidebarOffCanvasCloseDirective,
        HtmlAttributesDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LayoutModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                exports: [
                    AsideToggleDirective,
                    BrandMinimizeDirective,
                    MobileSidebarToggleDirective,
                    SidebarToggleDirective,
                    SidebarMinimizeDirective,
                    SidebarOffCanvasCloseDirective,
                    HtmlAttributesDirective
                ],
                declarations: [
                    AsideToggleDirective,
                    BrandMinimizeDirective,
                    MobileSidebarToggleDirective,
                    SidebarToggleDirective,
                    SidebarMinimizeDirective,
                    SidebarOffCanvasCloseDirective,
                    HtmlAttributesDirective
                ],
                providers: [
                    ClassToggler
                ]
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppAsideComponent, [{
        type: Component,
        args: [{
                selector: 'app-aside, cui-aside',
                template: `<ng-content></ng-content>`
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.Renderer2 }]; }, { asideMenuClass: [{
            type: HostBinding,
            args: ['class.aside-menu']
        }], display: [{
            type: Input
        }], fixed: [{
            type: Input
        }], offCanvas: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AppAsideModule, { declarations: function () { return [AppAsideComponent]; }, imports: function () { return [CommonModule,
        LayoutModule]; }, exports: function () { return [AppAsideComponent,
        LayoutModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppAsideModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    LayoutModule
                ],
                exports: [
                    AppAsideComponent,
                    LayoutModule
                ],
                declarations: [
                    AppAsideComponent
                ]
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppBreadcrumbService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.Router }, { type: ɵngcc1.ActivatedRoute }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppBreadcrumbComponent, [{
        type: Component,
        args: [{
                selector: 'app-breadcrumb',
                template: `
    <ng-template ngFor let-breadcrumb [ngForOf]="breadcrumbs | async" let-last = last>
      <li class="breadcrumb-item"
          *ngIf="breadcrumb.label.title && (breadcrumb.url.slice(-1) == '/' || last)"
          [ngClass]="{active: last}">
        <a *ngIf="!last" [routerLink]="breadcrumb.url">{{breadcrumb.label.title}}</a>
        <span *ngIf="last" [routerLink]="breadcrumb.url">{{breadcrumb.label.title}}</span>
      </li>
    </ng-template>
  `
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.Renderer2 }, { type: AppBreadcrumbService }, { type: ɵngcc0.ElementRef }]; }, { fixed: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CuiBreadcrumbComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line:component-selector
                selector: 'cui-breadcrumb',
                template: "<ol class=\"breadcrumb\">\r\n  <ng-template ngFor let-breadcrumb [ngForOf]=\"breadcrumbs | async\" let-last = last>\r\n    <li class=\"breadcrumb-item\"\r\n        *ngIf=\"breadcrumb.label.title && (breadcrumb.url.slice(-1) == '/' || last)\"\r\n        [ngClass]=\"{active: last}\">\r\n      <a *ngIf=\"!last\" [routerLink]=\"breadcrumb.url\">{{breadcrumb.label.title}}</a>\r\n      <span *ngIf=\"last\" [routerLink]=\"breadcrumb.url\">{{breadcrumb.label.title}}</span>\r\n    </li>\r\n  </ng-template>\r\n  <ng-content></ng-content>\r\n</ol>\r\n"
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.Renderer2 }, { type: AppBreadcrumbService }]; }, { fixed: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AppBreadcrumbModule, { declarations: function () { return [AppBreadcrumbComponent,
        CuiBreadcrumbComponent]; }, imports: function () { return [CommonModule, RouterModule]; }, exports: function () { return [AppBreadcrumbComponent,
        CuiBreadcrumbComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppBreadcrumbModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, RouterModule],
                exports: [AppBreadcrumbComponent, CuiBreadcrumbComponent],
                declarations: [AppBreadcrumbComponent, CuiBreadcrumbComponent]
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppFooterComponent, [{
        type: Component,
        args: [{
                selector: 'app-footer, cui-footer',
                template: `<ng-content></ng-content>`
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.Renderer2 }]; }, { appFooterClass: [{
            type: HostBinding,
            args: ['class.app-footer']
        }], fixed: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AppFooterModule, { declarations: function () { return [AppFooterComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [AppFooterComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppFooterModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                exports: [AppFooterComponent],
                declarations: [AppFooterComponent]
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppHeaderComponent, [{
        type: Component,
        args: [{
                selector: 'app-header, cui-header',
                template: "<ng-template [ngIf]=\"mobileSidebarToggler != false\">\r\n  <button class=\"navbar-toggler {{sidebarTogglerMobileClass}}\" type=\"button\" appSidebarToggler>\r\n    <span class=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n</ng-template>\r\n<a class=\"navbar-brand\" [routerLink]=\"navbarBrandRouterLink\">\r\n  <ng-template [ngIf]=\"navbarBrandImg\">\r\n    <img *ngIf=\"navbarBrand\"\r\n         [appHtmlAttr]=\"navbarBrand\"\r\n         [ngClass]=\"'navbar-brand'\">\r\n    <img *ngIf=\"navbarBrandFull\"\r\n         [appHtmlAttr]=\"navbarBrandFull\"\r\n         [ngClass]=\"'navbar-brand-full'\">\r\n    <img *ngIf=\"navbarBrandMinimized\"\r\n         [appHtmlAttr]=\"navbarBrandMinimized\"\r\n         [ngClass]=\"'navbar-brand-minimized'\">\r\n  </ng-template>\r\n  <ng-template [ngIf]=\"!navbarBrandImg\">\r\n    <div class=\"navbar-brand-full\" [innerHTML]=\"navbarBrandText.text\"></div>\r\n    <div class=\"navbar-brand-minimized\" [innerHTML]=\"navbarBrandText.icon\"></div>\r\n  </ng-template>\r\n</a>\r\n<ng-template [ngIf]=\"sidebarToggler != false\">\r\n  <button class=\"navbar-toggler {{sidebarTogglerClass}}\" type=\"button\" [appSidebarToggler]=\"sidebarToggler\">\r\n    <span class=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n</ng-template>\r\n<ng-content></ng-content>\r\n<ng-template [ngIf]=\"asideMenuToggler != false\">\r\n  <button class=\"navbar-toggler {{asideTogglerClass}}\" type=\"button\" [appAsideMenuToggler]=\"asideMenuToggler\">\r\n    <span class=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n</ng-template>\r\n<ng-template [ngIf]=\"mobileAsideMenuToggler != false\">\r\n  <button class=\"navbar-toggler {{asideTogglerMobileClass}}\" type=\"button\" appAsideMenuToggler>\r\n    <span class=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n</ng-template>\r\n"
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.Renderer2 }]; }, { navbarBrandText: [{
            type: Input
        }], navbarBrandRouterLink: [{
            type: Input
        }], appHeaderClass: [{
            type: HostBinding,
            args: ['class.app-header']
        }], navbarClass: [{
            type: HostBinding,
            args: ['class.navbar']
        }], fixed: [{
            type: Input
        }], navbarBrand: [{
            type: Input
        }], navbarBrandFull: [{
            type: Input
        }], navbarBrandMinimized: [{
            type: Input
        }], navbarBrandHref: [{
            type: Input
        }], sidebarToggler: [{
            type: Input
        }], mobileSidebarToggler: [{
            type: Input
        }], asideMenuToggler: [{
            type: Input
        }], mobileAsideMenuToggler: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AppHeaderModule, { declarations: function () { return [AppHeaderComponent]; }, imports: function () { return [CommonModule,
        RouterModule,
        LayoutModule]; }, exports: function () { return [AppHeaderComponent,
        LayoutModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppHeaderModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    RouterModule,
                    LayoutModule
                ],
                exports: [
                    AppHeaderComponent,
                    LayoutModule
                ],
                declarations: [
                    AppHeaderComponent
                ]
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppSidebarService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppSidebarComponent, [{
        type: Component,
        args: [{
                selector: 'app-sidebar, cui-sidebar',
                template: `<ng-content></ng-content>`
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.Renderer2 }, { type: AppSidebarService }]; }, { minimizedChange: [{
            type: Output
        }], sidebarClass: [{
            type: HostBinding,
            args: ['class.sidebar']
        }], minimized: [{
            type: Input
        }], compact: [{
            type: Input
        }], display: [{
            type: Input
        }], fixed: [{
            type: Input
        }], offCanvas: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SidebarNavService, [{
        type: Injectable
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SidebarNavHelper, [{
        type: Injectable
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppSidebarFooterComponent, [{
        type: Component,
        args: [{
                selector: 'app-sidebar-footer, cui-sidebar-footer',
                template: `<ng-content></ng-content>`
            }]
    }], function () { return []; }, { sidebarFooterClass: [{
            type: HostBinding,
            args: ['class.sidebar-footer']
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppSidebarFormComponent, [{
        type: Component,
        args: [{
                selector: 'app-sidebar-form, cui-sidebar-form',
                template: `<ng-content></ng-content>`
            }]
    }], function () { return []; }, { sidebarFormClass: [{
            type: HostBinding,
            args: ['class.sidebar-form']
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppSidebarHeaderComponent, [{
        type: Component,
        args: [{
                selector: 'app-sidebar-header, cui-sidebar-header',
                template: `<ng-content></ng-content>`
            }]
    }], function () { return []; }, { sidebarHeaderClass: [{
            type: HostBinding,
            args: ['class.sidebar-header']
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppSidebarMinimizerComponent, [{
        type: Component,
        args: [{
                selector: 'app-sidebar-minimizer, cui-sidebar-minimizer',
                template: ``
            }]
    }], function () { return [{ type: AppSidebarService }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }, {
            type: Input
        }], sidebarMinimizerClass: [{
            type: HostBinding,
            args: ['class.sidebar-minimizer']
        }], toggleOpen: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NavDropdownDirective, [{
        type: Directive,
        args: [{
                selector: '[appNavDropdown]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NavDropdownToggleDirective, [{
        type: Directive,
        args: [{
                selector: '[appNavDropdownToggle]'
            }]
    }], function () { return [{ type: NavDropdownDirective }]; }, { toggleOpen: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppSidebarNavComponent, [{
        type: Component,
        args: [{
                selector: 'app-sidebar-nav, cui-sidebar-nav',
                template: "<app-sidebar-nav-items\n  class=\"nav\"\n  [items]=\"navItemsArray\">\n</app-sidebar-nav-items>\n"
            }]
    }], function () { return [{ type: ɵngcc1.Router }]; }, { navItems: [{
            type: Input
        }], sidebarNavClass: [{
            type: HostBinding,
            args: ['class.sidebar-nav']
        }], role: [{
            type: HostBinding,
            args: ['attr.role']
        }, {
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppSidebarNavDividerComponent, [{
        type: Component,
        args: [{
                selector: 'app-sidebar-nav-divider, cui-sidebar-nav-divider',
                template: ``
            }]
    }], function () { return []; }, { item: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppSidebarNavDropdownComponent, [{
        type: Component,
        args: [{
                selector: 'app-sidebar-nav-dropdown, cui-sidebar-nav-dropdown',
                template: `
    <a class="nav-link nav-dropdown-toggle"
       appNavDropdownToggle
       [appHtmlAttr]="item.attributes">
      <i *ngIf="helper.hasIcon(item)" [ngClass]="item | appSidebarNavIcon"></i>
      <ng-container>{{item.name}}</ng-container>
      <span *ngIf="helper.hasBadge(item)" [ngClass]="item | appSidebarNavBadge">{{ item.badge.text }}</span>
    </a>
    <app-sidebar-nav-items
      class="nav-dropdown-items"
      [items]="item.children">
    </app-sidebar-nav-items>
  `,
                providers: [SidebarNavHelper],
                styles: ['.nav-dropdown-toggle { cursor: pointer; }',
                    '.nav-dropdown-items { display: block; }']
            }]
    }], function () { return [{ type: SidebarNavHelper }]; }, { item: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppSidebarNavItemsComponent, [{
        type: Component,
        args: [{
                selector: 'app-sidebar-nav-items, cui-sidebar-nav-items',
                template: `
    <ng-container *ngFor="let item of items">
      <ng-container [ngSwitch]="helper.itemType(item)">
        <app-sidebar-nav-dropdown
          *ngSwitchCase="'dropdown'"
          [item]="item"
          [class.open]="helper.isActive(router, item)"
          [ngClass]="item | appSidebarNavItemClass"
          appNavDropdown
          routerLinkActive="open">
        </app-sidebar-nav-dropdown>
        <app-sidebar-nav-divider
          *ngSwitchCase="'divider'"
          [item]="item"
          [ngClass]="item | appSidebarNavItemClass"
          [appHtmlAttr]="item.attributes">
        </app-sidebar-nav-divider>
        <app-sidebar-nav-title
          *ngSwitchCase="'title'"
          [item]="item"
          [ngClass]="item | appSidebarNavItemClass"
          [appHtmlAttr]="item.attributes">
        </app-sidebar-nav-title>
        <app-sidebar-nav-label
          *ngSwitchCase="'label'"
          [item]="item"
          class="nav-item"
          [ngClass]="item | appSidebarNavItemClass">
        </app-sidebar-nav-label>
        <ng-container
          *ngSwitchCase="'empty'">
        </ng-container>
        <app-sidebar-nav-link
          *ngSwitchDefault
          [item]="item"
          class="nav-item"
          [ngClass]="item | appSidebarNavItemClass"
          (linkClick)="hideMobile()"
        >
        </app-sidebar-nav-link>
      </ng-container>
    </ng-container>
  `
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc1.Router }, { type: SidebarNavHelper }]; }, { items: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppSidebarNavLinkContentComponent, [{
        type: Component,
        args: [{
                selector: 'app-sidebar-nav-link-content, cui-sidebar-nav-link-content',
                template: `
    <ng-container *ngIf="true">
      <i *ngIf="helper.hasIcon(item)" [ngClass]="item | appSidebarNavIcon"></i>
      <ng-container>{{item.name}}</ng-container>
      <span *ngIf="helper.hasBadge(item)" [ngClass]="item | appSidebarNavBadge">{{ item.badge.text }}</span>
    </ng-container>
  `,
                providers: [SidebarNavHelper]
            }]
    }], function () { return [{ type: SidebarNavHelper }]; }, { item: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppSidebarNavLinkComponent, [{
        type: Component,
        args: [{
                selector: 'app-sidebar-nav-link, cui-sidebar-nav-link',
                template: "<ng-container [ngSwitch]=\"linkType\">\r\n  <a *ngSwitchCase=\"'disabled'\"\r\n     [ngClass]=\"item | appSidebarNavLink\"\r\n     [appHtmlAttr]=\"item.attributes\"\r\n  >\r\n    <app-sidebar-nav-link-content [item]=\"item\"></app-sidebar-nav-link-content>\r\n  </a>\r\n  <a *ngSwitchCase=\"'external'\"\r\n     [ngClass]=\"item | appSidebarNavLink\"\r\n     [href]=\"href\"\r\n     [appHtmlAttr]=\"item.attributes\"\r\n     (click)=\"linkClicked()\"\r\n  >\r\n    <app-sidebar-nav-link-content [item]=\"item\"></app-sidebar-nav-link-content>\r\n  </a>\r\n  <a *ngSwitchDefault\r\n     [ngClass]=\"item | appSidebarNavLink\"\r\n     [appHtmlAttr]=\"item.attributes\"\r\n     [target]=\"item.attributes?.target\"\r\n     [queryParams]=\"item.linkProps?.queryParams\"\r\n     [fragment]=\"item.linkProps?.fragment\"\r\n     [queryParamsHandling]=\"item.linkProps?.queryParamsHandling\"\r\n     [preserveFragment]=\"item.linkProps?.preserveFragment\"\r\n     [skipLocationChange]=\"item.linkProps?.skipLocationChange\"\r\n     [replaceUrl]=\"item.linkProps?.replaceUrl\"\r\n     [state]=\"item.linkProps?.state\"\r\n     [routerLink]=\"item.url\"\r\n     [class.active]=\"linkActive\"\r\n     (click)=\"linkClicked()\"\r\n  >\r\n    <app-sidebar-nav-link-content [item]=\"item\"></app-sidebar-nav-link-content>\r\n  </a>\r\n</ng-container>\r\n",
                providers: [SidebarNavHelper]
            }]
    }], function () { return [{ type: ɵngcc1.Router }]; }, { linkClick: [{
            type: Output
        }], item: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppSidebarNavTitleComponent, [{
        type: Component,
        args: [{
                selector: 'app-sidebar-nav-title, cui-sidebar-nav-title',
                template: ''
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { item: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppSidebarNavLabelComponent, [{
        type: Component,
        args: [{
                selector: 'app-sidebar-nav-label, cui-sidebar-nav-label',
                template: "<a [ngClass]=\"getItemClass()\"\r\n   href=\"{{item.url}}\"\r\n   [appHtmlAttr]=\"item.attributes\">\r\n  <i *ngIf=\"helper.hasIcon(item)\" [ngClass]=\"getLabelIconClass()\"></i>\r\n  <ng-container>{{item.name}}</ng-container>\r\n  <span *ngIf=\"helper.hasBadge(item)\" [ngClass]=\"item | appSidebarNavBadge\">{{ item.badge.text }}</span>\r\n</a>\r\n"
            }]
    }], function () { return [{ type: SidebarNavHelper }]; }, { item: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppSidebarNavIconPipe, [{
        type: Pipe,
        args: [{
                name: 'appSidebarNavIcon'
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppSidebarNavBadgePipe, [{
        type: Pipe,
        args: [{
                name: 'appSidebarNavBadge'
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppSidebarNavLinkPipe, [{
        type: Pipe,
        args: [{
                name: 'appSidebarNavLink'
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppSidebarNavItemClassPipe, [{
        type: Pipe,
        args: [{
                name: 'appSidebarNavItemClass'
            }]
    }], function () { return [{ type: SidebarNavHelper }]; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AppSidebarModule, { declarations: function () { return [AppSidebarFooterComponent,
        AppSidebarFormComponent,
        AppSidebarHeaderComponent,
        AppSidebarMinimizerComponent, AppSidebarMinimizerComponent,
        AppSidebarComponent,
        AppSidebarNavItemsComponent,
        AppSidebarNavComponent,
        AppSidebarNavDividerComponent,
        AppSidebarNavDropdownComponent,
        AppSidebarNavLinkComponent,
        AppSidebarNavLinkContentComponent,
        AppSidebarNavTitleComponent,
        NavDropdownDirective,
        NavDropdownToggleDirective,
        AppSidebarNavLabelComponent,
        AppSidebarNavIconPipe,
        AppSidebarNavBadgePipe,
        AppSidebarNavLinkPipe,
        AppSidebarNavItemClassPipe]; }, imports: function () { return [CommonModule,
        RouterModule,
        LayoutModule]; }, exports: function () { return [AppSidebarFooterComponent,
        AppSidebarFormComponent,
        AppSidebarHeaderComponent,
        AppSidebarMinimizerComponent,
        AppSidebarComponent,
        AppSidebarNavItemsComponent,
        AppSidebarNavComponent,
        AppSidebarNavDividerComponent,
        AppSidebarNavDropdownComponent,
        AppSidebarNavLabelComponent,
        AppSidebarNavLinkComponent,
        AppSidebarNavLinkContentComponent,
        AppSidebarNavTitleComponent,
        NavDropdownDirective,
        NavDropdownToggleDirective,
        LayoutModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppSidebarModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    RouterModule,
                    LayoutModule
                ],
                exports: [
                    AppSidebarFooterComponent,
                    AppSidebarFormComponent,
                    AppSidebarHeaderComponent,
                    AppSidebarMinimizerComponent,
                    AppSidebarComponent,
                    AppSidebarNavItemsComponent,
                    AppSidebarNavComponent,
                    AppSidebarNavDividerComponent,
                    AppSidebarNavDropdownComponent,
                    AppSidebarNavLabelComponent,
                    AppSidebarNavLinkComponent,
                    AppSidebarNavLinkContentComponent,
                    AppSidebarNavTitleComponent,
                    NavDropdownDirective,
                    NavDropdownToggleDirective,
                    LayoutModule
                ],
                declarations: [
                    AppSidebarFooterComponent,
                    AppSidebarFormComponent,
                    AppSidebarHeaderComponent,
                    AppSidebarMinimizerComponent,
                    AppSidebarMinimizerComponent,
                    AppSidebarComponent,
                    AppSidebarNavItemsComponent,
                    AppSidebarNavComponent,
                    AppSidebarNavDividerComponent,
                    AppSidebarNavDropdownComponent,
                    AppSidebarNavLinkComponent,
                    AppSidebarNavLinkContentComponent,
                    AppSidebarNavTitleComponent,
                    NavDropdownDirective,
                    NavDropdownToggleDirective,
                    AppSidebarNavLabelComponent,
                    AppSidebarNavIconPipe,
                    AppSidebarNavBadgePipe,
                    AppSidebarNavLinkPipe,
                    AppSidebarNavItemClassPipe
                ],
                providers: [
                    SidebarNavHelper,
                    AppSidebarService
                ]
            }]
    }], null, null); })();

/*
 * Public API Surface of @coreui/angular
 */
// export * from './lib/shared/index';
// export * from './lib/coreui.module';

/**
 * Generated bundle index. Do not edit.
 */

export { AppAsideComponent, AppAsideModule, AppBreadcrumbComponent, AppBreadcrumbModule, AppFooterComponent, AppFooterModule, AppHeaderComponent, AppHeaderModule, AppSidebarComponent, AppSidebarModule, CuiBreadcrumbComponent, SidebarNavHelper, LayoutModule as ɵa, SidebarToggleDirective as ɵb, AppSidebarNavBadgePipe as ɵba, AppSidebarNavLinkPipe as ɵbb, AppSidebarNavItemClassPipe as ɵbc, SidebarMinimizeDirective as ɵc, MobileSidebarToggleDirective as ɵd, SidebarOffCanvasCloseDirective as ɵe, BrandMinimizeDirective as ɵf, AsideToggleDirective as ɵg, HtmlAttributesDirective as ɵh, ClassToggler as ɵi, AppBreadcrumbService as ɵj, AppSidebarService as ɵk, AppSidebarFooterComponent as ɵl, AppSidebarFormComponent as ɵm, AppSidebarHeaderComponent as ɵn, AppSidebarMinimizerComponent as ɵo, AppSidebarNavItemsComponent as ɵp, AppSidebarNavComponent as ɵq, AppSidebarNavDividerComponent as ɵr, AppSidebarNavDropdownComponent as ɵs, AppSidebarNavLabelComponent as ɵt, AppSidebarNavLinkContentComponent as ɵu, AppSidebarNavLinkComponent as ɵv, AppSidebarNavTitleComponent as ɵw, NavDropdownDirective as ɵx, NavDropdownToggleDirective as ɵy, AppSidebarNavIconPipe as ɵz };

//# sourceMappingURL=coreui-angular.js.map