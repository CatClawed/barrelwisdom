import { __decorate, __metadata } from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { filter } from 'rxjs/operators';
import { SidebarNavHelper } from '../app-sidebar-nav.service';
var AppSidebarNavLinkContentComponent = /** @class */ (function () {
    function AppSidebarNavLinkContentComponent(helper) {
        this.helper = helper;
    }
    AppSidebarNavLinkContentComponent.prototype.ngOnInit = function () { };
    AppSidebarNavLinkContentComponent.prototype.ngOnDestroy = function () { };
    AppSidebarNavLinkContentComponent.ctorParameters = function () { return [
        { type: SidebarNavHelper }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], AppSidebarNavLinkContentComponent.prototype, "item", void 0);
    AppSidebarNavLinkContentComponent = __decorate([
        Component({
            selector: 'app-sidebar-nav-link-content, cui-sidebar-nav-link-content',
            template: "\n    <ng-container *ngIf=\"true\">\n      <i *ngIf=\"helper.hasIcon(item)\" [ngClass]=\"item | appSidebarNavIcon\"></i>\n      <ng-container>{{item.name}}</ng-container>\n      <span *ngIf=\"helper.hasBadge(item)\" [ngClass]=\"item | appSidebarNavBadge\">{{ item.badge.text }}</span>\n    </ng-container>\n  ",
            providers: [SidebarNavHelper]
        }),
        __metadata("design:paramtypes", [SidebarNavHelper])
    ], AppSidebarNavLinkContentComponent);
    return AppSidebarNavLinkContentComponent;
}());
export { AppSidebarNavLinkContentComponent };
var AppSidebarNavLinkComponent = /** @class */ (function () {
    function AppSidebarNavLinkComponent(router) {
        this.router = router;
        this.linkClick = new EventEmitter();
        this.navigationEndObservable = router.events.pipe(filter(function (event) {
            return event instanceof NavigationEnd;
        }));
    }
    Object.defineProperty(AppSidebarNavLinkComponent.prototype, "item", {
        get: function () {
            return this._Item;
        },
        set: function (item) {
            this._Item = JSON.parse(JSON.stringify(item));
        },
        enumerable: true,
        configurable: true
    });
    AppSidebarNavLinkComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.url = typeof this.item.url === 'string' ? this.item.url : this.router.serializeUrl(this.router.createUrlTree(this.item.url));
        this.linkType = this.getLinkType();
        this.href = this.isDisabled() ? '' : (this.item.href || this.url);
        this.linkActive = this.router.url.split(/[?#(;]/)[0] === this.href.split(/[?#(;]/)[0];
        this.navSubscription = this.navigationEndObservable.subscribe(function (event) {
            var itemUrlArray = _this.href.split(/[?#(;]/)[0].split('/');
            var urlArray = event.urlAfterRedirects.split(/[?#(;]/)[0].split('/');
            _this.linkActive = itemUrlArray.every(function (value, index) { return value === urlArray[index]; });
        });
    };
    AppSidebarNavLinkComponent.prototype.ngOnDestroy = function () {
        this.navSubscription.unsubscribe();
    };
    AppSidebarNavLinkComponent.prototype.getLinkType = function () {
        return this.isDisabled() ? 'disabled' : this.isExternalLink() ? 'external' : 'link';
    };
    AppSidebarNavLinkComponent.prototype.isDisabled = function () {
        return (this.item.attributes && this.item.attributes.disabled) ? true : null;
    };
    AppSidebarNavLinkComponent.prototype.isExternalLink = function () {
        return !!this.item.href || this.url.substring(0, 4) === 'http';
    };
    AppSidebarNavLinkComponent.prototype.linkClicked = function () {
        this.linkClick.emit();
    };
    AppSidebarNavLinkComponent.ctorParameters = function () { return [
        { type: Router }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], AppSidebarNavLinkComponent.prototype, "item", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], AppSidebarNavLinkComponent.prototype, "linkClick", void 0);
    AppSidebarNavLinkComponent = __decorate([
        Component({
            selector: 'app-sidebar-nav-link, cui-sidebar-nav-link',
            template: "<ng-container [ngSwitch]=\"linkType\">\r\n  <a *ngSwitchCase=\"'disabled'\"\r\n     [ngClass]=\"item | appSidebarNavLink\"\r\n     [appHtmlAttr]=\"item.attributes\"\r\n  >\r\n    <app-sidebar-nav-link-content [item]=\"item\"></app-sidebar-nav-link-content>\r\n  </a>\r\n  <a *ngSwitchCase=\"'external'\"\r\n     [ngClass]=\"item | appSidebarNavLink\"\r\n     [href]=\"href\"\r\n     [appHtmlAttr]=\"item.attributes\"\r\n     (click)=\"linkClicked()\"\r\n  >\r\n    <app-sidebar-nav-link-content [item]=\"item\"></app-sidebar-nav-link-content>\r\n  </a>\r\n  <a *ngSwitchDefault\r\n     [ngClass]=\"item | appSidebarNavLink\"\r\n     [appHtmlAttr]=\"item.attributes\"\r\n     [target]=\"item.attributes?.target\"\r\n     [queryParams]=\"item.linkProps?.queryParams\"\r\n     [fragment]=\"item.linkProps?.fragment\"\r\n     [queryParamsHandling]=\"item.linkProps?.queryParamsHandling\"\r\n     [preserveFragment]=\"item.linkProps?.preserveFragment\"\r\n     [skipLocationChange]=\"item.linkProps?.skipLocationChange\"\r\n     [replaceUrl]=\"item.linkProps?.replaceUrl\"\r\n     [state]=\"item.linkProps?.state\"\r\n     [routerLink]=\"item.url\"\r\n     [class.active]=\"linkActive\"\r\n     (click)=\"linkClicked()\"\r\n  >\r\n    <app-sidebar-nav-link-content [item]=\"item\"></app-sidebar-nav-link-content>\r\n  </a>\r\n</ng-container>\r\n",
            providers: [SidebarNavHelper]
        }),
        __metadata("design:paramtypes", [Router])
    ], AppSidebarNavLinkComponent);
    return AppSidebarNavLinkComponent;
}());
export { AppSidebarNavLinkComponent };
//# sourceMappingURL=data:application/json;base64,