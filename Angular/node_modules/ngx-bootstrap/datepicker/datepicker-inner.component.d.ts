import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { DateFormatter } from './date-formatter';
import * as ɵngcc0 from '@angular/core';
export declare class DatePickerInnerComponent implements OnInit, OnChanges {
    locale: string;
    datepickerMode: string;
    startingDay: number;
    yearRange: number;
    minDate: Date;
    maxDate: Date;
    minMode: string;
    maxMode: string;
    showWeeks: boolean;
    formatDay: string;
    formatMonth: string;
    formatYear: string;
    formatDayHeader: string;
    formatDayTitle: string;
    formatMonthTitle: string;
    onlyCurrentMonth: boolean;
    shortcutPropagation: boolean;
    customClass: {
        date: Date;
        mode: string;
        clazz: string;
    }[];
    monthColLimit: number;
    yearColLimit: number;
    dateDisabled: {
        date: Date;
        mode: string;
    }[];
    dayDisabled: number[];
    initDate: Date;
    selectionDone: EventEmitter<Date>;
    update: EventEmitter<Date>;
    activeDateChange: EventEmitter<Date>;
    stepDay: any;
    stepMonth: any;
    stepYear: any;
    uniqueId: string;
    protected modes: string[];
    protected dateFormatter: DateFormatter;
    protected _activeDate: Date;
    protected selectedDate: Date;
    protected activeDateId: string;
    protected refreshViewHandlerDay: Function;
    protected compareHandlerDay: Function;
    protected refreshViewHandlerMonth: Function;
    protected compareHandlerMonth: Function;
    protected refreshViewHandlerYear: Function;
    protected compareHandlerYear: Function;
    activeDate: Date;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    checkIfActiveDateGotUpdated(activeDate: any): void;
    setCompareHandler(handler: Function, type: string): void;
    compare(date1: Date, date2: Date): number | undefined;
    setRefreshViewHandler(handler: Function, type: string): void;
    refreshView(): void;
    dateFilter(date: Date, format: string): string;
    isActive(dateObject: any): boolean;
    createDateObject(date: Date, format: string): any;
    split(arr: any[], size: number): any[];
    fixTimeZone(date: Date): Date;
    select(date: Date, isManual?: boolean): void;
    move(direction: number): void;
    toggleMode(_direction: number): void;
    protected getCustomClassForDate(date: Date): string;
    protected compareDateDisabled(date1Disabled: {
        date: Date;
        mode: string;
    }, date2: Date): number;
    protected isDisabled(date: Date): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DatePickerInnerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DatePickerInnerComponent, "datepicker-inner", never, { "activeDate": "activeDate"; "datepickerMode": "datepickerMode"; "locale": "locale"; "startingDay": "startingDay"; "yearRange": "yearRange"; "minDate": "minDate"; "maxDate": "maxDate"; "minMode": "minMode"; "maxMode": "maxMode"; "showWeeks": "showWeeks"; "formatDay": "formatDay"; "formatMonth": "formatMonth"; "formatYear": "formatYear"; "formatDayHeader": "formatDayHeader"; "formatDayTitle": "formatDayTitle"; "formatMonthTitle": "formatMonthTitle"; "onlyCurrentMonth": "onlyCurrentMonth"; "shortcutPropagation": "shortcutPropagation"; "customClass": "customClass"; "monthColLimit": "monthColLimit"; "yearColLimit": "yearColLimit"; "dateDisabled": "dateDisabled"; "dayDisabled": "dayDisabled"; "initDate": "initDate"; }, { "selectionDone": "selectionDone"; "update": "update"; "activeDateChange": "activeDateChange"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci1pbm5lci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZGF0ZXBpY2tlci1pbm5lci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGF0ZUZvcm1hdHRlciB9IGZyb20gJy4vZGF0ZS1mb3JtYXR0ZXInO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRGF0ZVBpY2tlcklubmVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICAgIGxvY2FsZTogc3RyaW5nO1xuICAgIGRhdGVwaWNrZXJNb2RlOiBzdHJpbmc7XG4gICAgc3RhcnRpbmdEYXk6IG51bWJlcjtcbiAgICB5ZWFyUmFuZ2U6IG51bWJlcjtcbiAgICBtaW5EYXRlOiBEYXRlO1xuICAgIG1heERhdGU6IERhdGU7XG4gICAgbWluTW9kZTogc3RyaW5nO1xuICAgIG1heE1vZGU6IHN0cmluZztcbiAgICBzaG93V2Vla3M6IGJvb2xlYW47XG4gICAgZm9ybWF0RGF5OiBzdHJpbmc7XG4gICAgZm9ybWF0TW9udGg6IHN0cmluZztcbiAgICBmb3JtYXRZZWFyOiBzdHJpbmc7XG4gICAgZm9ybWF0RGF5SGVhZGVyOiBzdHJpbmc7XG4gICAgZm9ybWF0RGF5VGl0bGU6IHN0cmluZztcbiAgICBmb3JtYXRNb250aFRpdGxlOiBzdHJpbmc7XG4gICAgb25seUN1cnJlbnRNb250aDogYm9vbGVhbjtcbiAgICBzaG9ydGN1dFByb3BhZ2F0aW9uOiBib29sZWFuO1xuICAgIGN1c3RvbUNsYXNzOiB7XG4gICAgICAgIGRhdGU6IERhdGU7XG4gICAgICAgIG1vZGU6IHN0cmluZztcbiAgICAgICAgY2xheno6IHN0cmluZztcbiAgICB9W107XG4gICAgbW9udGhDb2xMaW1pdDogbnVtYmVyO1xuICAgIHllYXJDb2xMaW1pdDogbnVtYmVyO1xuICAgIGRhdGVEaXNhYmxlZDoge1xuICAgICAgICBkYXRlOiBEYXRlO1xuICAgICAgICBtb2RlOiBzdHJpbmc7XG4gICAgfVtdO1xuICAgIGRheURpc2FibGVkOiBudW1iZXJbXTtcbiAgICBpbml0RGF0ZTogRGF0ZTtcbiAgICBzZWxlY3Rpb25Eb25lOiBFdmVudEVtaXR0ZXI8RGF0ZT47XG4gICAgdXBkYXRlOiBFdmVudEVtaXR0ZXI8RGF0ZT47XG4gICAgYWN0aXZlRGF0ZUNoYW5nZTogRXZlbnRFbWl0dGVyPERhdGU+O1xuICAgIHN0ZXBEYXk6IGFueTtcbiAgICBzdGVwTW9udGg6IGFueTtcbiAgICBzdGVwWWVhcjogYW55O1xuICAgIHVuaXF1ZUlkOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIG1vZGVzOiBzdHJpbmdbXTtcbiAgICBwcm90ZWN0ZWQgZGF0ZUZvcm1hdHRlcjogRGF0ZUZvcm1hdHRlcjtcbiAgICBwcm90ZWN0ZWQgX2FjdGl2ZURhdGU6IERhdGU7XG4gICAgcHJvdGVjdGVkIHNlbGVjdGVkRGF0ZTogRGF0ZTtcbiAgICBwcm90ZWN0ZWQgYWN0aXZlRGF0ZUlkOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIHJlZnJlc2hWaWV3SGFuZGxlckRheTogRnVuY3Rpb247XG4gICAgcHJvdGVjdGVkIGNvbXBhcmVIYW5kbGVyRGF5OiBGdW5jdGlvbjtcbiAgICBwcm90ZWN0ZWQgcmVmcmVzaFZpZXdIYW5kbGVyTW9udGg6IEZ1bmN0aW9uO1xuICAgIHByb3RlY3RlZCBjb21wYXJlSGFuZGxlck1vbnRoOiBGdW5jdGlvbjtcbiAgICBwcm90ZWN0ZWQgcmVmcmVzaFZpZXdIYW5kbGVyWWVhcjogRnVuY3Rpb247XG4gICAgcHJvdGVjdGVkIGNvbXBhcmVIYW5kbGVyWWVhcjogRnVuY3Rpb247XG4gICAgYWN0aXZlRGF0ZTogRGF0ZTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIGNoZWNrSWZBY3RpdmVEYXRlR290VXBkYXRlZChhY3RpdmVEYXRlOiBhbnkpOiB2b2lkO1xuICAgIHNldENvbXBhcmVIYW5kbGVyKGhhbmRsZXI6IEZ1bmN0aW9uLCB0eXBlOiBzdHJpbmcpOiB2b2lkO1xuICAgIGNvbXBhcmUoZGF0ZTE6IERhdGUsIGRhdGUyOiBEYXRlKTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAgIHNldFJlZnJlc2hWaWV3SGFuZGxlcihoYW5kbGVyOiBGdW5jdGlvbiwgdHlwZTogc3RyaW5nKTogdm9pZDtcbiAgICByZWZyZXNoVmlldygpOiB2b2lkO1xuICAgIGRhdGVGaWx0ZXIoZGF0ZTogRGF0ZSwgZm9ybWF0OiBzdHJpbmcpOiBzdHJpbmc7XG4gICAgaXNBY3RpdmUoZGF0ZU9iamVjdDogYW55KTogYm9vbGVhbjtcbiAgICBjcmVhdGVEYXRlT2JqZWN0KGRhdGU6IERhdGUsIGZvcm1hdDogc3RyaW5nKTogYW55O1xuICAgIHNwbGl0KGFycjogYW55W10sIHNpemU6IG51bWJlcik6IGFueVtdO1xuICAgIGZpeFRpbWVab25lKGRhdGU6IERhdGUpOiBEYXRlO1xuICAgIHNlbGVjdChkYXRlOiBEYXRlLCBpc01hbnVhbD86IGJvb2xlYW4pOiB2b2lkO1xuICAgIG1vdmUoZGlyZWN0aW9uOiBudW1iZXIpOiB2b2lkO1xuICAgIHRvZ2dsZU1vZGUoX2RpcmVjdGlvbjogbnVtYmVyKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgZ2V0Q3VzdG9tQ2xhc3NGb3JEYXRlKGRhdGU6IERhdGUpOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIGNvbXBhcmVEYXRlRGlzYWJsZWQoZGF0ZTFEaXNhYmxlZDoge1xuICAgICAgICBkYXRlOiBEYXRlO1xuICAgICAgICBtb2RlOiBzdHJpbmc7XG4gICAgfSwgZGF0ZTI6IERhdGUpOiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIGlzRGlzYWJsZWQoZGF0ZTogRGF0ZSk6IGJvb2xlYW47XG59XG4iXX0=