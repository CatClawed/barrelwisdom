{"version":3,"file":"ngx-bootstrap-buttons.js","sources":["ng:/ngx-bootstrap/buttons/button-checkbox.directive.ts","ng:/ngx-bootstrap/buttons/button-radio.directive.ts","ng:/ngx-bootstrap/buttons/button-radio-group.directive.ts","ng:/ngx-bootstrap/buttons/buttons.module.ts"],"names":["RADIO_CONTROL_VALUE_ACCESSOR"],"mappings":";;;;;;;;;;MAaa,+BAA+B,GAAa;AACzD,IAAE,OAAO,EAAE,iBAAiB;AAC5B;AACE,IAAA,WAAW,EAAE,UAAU;AAAM;AAAmB;AAClD,IAD0B,MAAM,uBAAuB,EAAC;AACxD,IAAE,KAAK,EAAE,IAAI;AACb;AACA;AACG;AACyC;AACzC,MAKU,uBAAuB;AAAG,IAJvC;AACG;AAAY;AACmB;AAAY,QAInC,oBAAe,GAAG,IAAI,CAAC;AAClC;AAAY;AACE;AAAY,QAAf,qBAAgB,GAAG,KAAK,CAAC;AACpC,QAGE,UAAK,GAAG,KAAK,CAAC;AAChB,QAIY,aAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC;AAC1C,QAAY,cAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;AAC3C,KAmDC;AACD;AAAqB;AAAQ;AAAmB;AAAQ,IAjDtD,OAAO;AAAK,QACV,IAAI,IAAI,CAAC,UAAU,EAAE;AACzB,YAAM,OAAO;AACb,SAAK;AACL,QACI,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC7B,QAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC9B,KAAG;AACH;AACO;AACF;AAAQ,IADX,QAAQ;AAAK,QACX,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC;AAC/C,KAAG;AACH;AACO;AAAkB;AACpB;AAAQ,IADX,IAAc,SAAS;AAAK,QAC1B,OAAO,OAAO,IAAI,CAAC,eAAe,KAAK,WAAW;AACtD,cAAQ,IAAI,CAAC,eAAe;AAC5B,cAAQ,IAAI,CAAC;AACb,KAAG;AACH;AACO;AAAkB;AACrB;AAAQ,IADV,IAAc,UAAU;AAAK,QAC3B,OAAO,OAAO,IAAI,CAAC,gBAAgB,KAAK,WAAW;AACvD,cAAQ,IAAI,CAAC,gBAAgB;AAC7B,cAAQ,KAAK,CAAC;AACd,KAAG;AACH;AACO;AAAwB;AACd;AAChB,IAFC,MAAM,CAAC,KAAc;AAAI,QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACvB,QAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;AAC/D,KAAG;AACH;AAEC;AACE;AAAQ;AAAwB;AAClC;AAAQ,IADP,UAAU,CAAC,KAA8B;AAAI,QAC3C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC;AAC1C,QAAI,IAAI,CAAC,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;AAC1D,KAAG;AACH;AACO;AAA6B;AAC7B;AAAQ,IADb,gBAAgB,CAAC,UAAmB;AAAI,QACtC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;AACjC,KAAG;AACH;AACO;AAAqB;AACtB;AAAQ,IADZ,gBAAgB,CAAC,EAAY;AAAI,QAC/B,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;AACvB,KAAG;AACH;AACO;AAAqB;AACvB;AAAQ,IADX,iBAAiB,CAAC,EAAY;AAAI,QAChC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;AACxB,KAAG;AACH;mDAtEC,SAAS,SAAC,kBACT,QAAQ,EAAE,eAAe;KACzB,SAAS,EAAE,CAAC,+BAA+B,CAAC,cAC7C;;;;;2KACI;AAAC;AAA2C,8BAE9C,KAAK;AAAK,+BAEV,KAAK;AAAK,oBAEV,WAAW,SAAC,cAAc,cAC1B,WAAW,SAAC,mBAAmB;AAC7B,sBASF,YAAY,SAAC,OAAO;AACnB;;;;;;;;;;;;;;;;;;;;oBAAE;AAAC;AACP;AAAQ;AAIJ;AAAiB;AAAQ,IArB3B,kDAAgC;AAClC;AAAQ;AACF;AAAiB;AAAQ,IAA7B,mDAAkC;AACpC;AACoB,IAAlB,wCAEc;AAChB;AACO;AAAiB;AACnB;AAAQ,IADX,wCAAkC;AACpC;AAAQ;AAAiB;AAEhB;AAAQ,IAFf,6CAA8B;AAChC;AACO;AAAiB;AAAkB;AACnC,IADL,2CAAwC;AAC1C;AAAQ;AAAiB;AAAkB;AAErC,IAFJ,4CAAyC;AAC3C;AACC;AAAC;AAAI;AACe;AAON;ACnDf;AAgBA,MAAa,4BAA4B,GAAa;AACtD,IAAE,OAAO,EAAE,iBAAiB;AAC5B;AACE,IAAA,WAAW,EAAE,UAAU;AAAM;AAAmB;AAC/C,IADuB,MAAM,oBAAoB,EAAC;AACrD,IAAE,KAAK,EAAE,IAAI;AACb,CAAC;AACD;AACG;AAC0C;AACgC;AAM7E,MAAa,oBAAoB;AAAG;AAAQ;AAAqB;AACtD;AACT;AAA2B;AAE3B,IAoCA,YACU,EAAc,EACd,GAAsB,EACV,KAAgC,EAC5C,QAAmB;AAC5B,QAJS,OAAE,GAAF,EAAE,CAAY;AAAC,QACf,QAAG,GAAH,GAAG,CAAmB;AAAC,QACX,UAAK,GAAL,KAAK,CAA2B;AAAC,QAC7C,aAAQ,GAAR,QAAQ,CAAW;AAC/B,QA5CE,aAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC;AAChC,QAAE,cAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;AACjC,KA0CM;AACN;AACO;AAEI;AAAmB;AAAQ,IAxCpC,IAAa,KAAK;AACpB,QAAI,OAAO,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;AACvD,KAAG;AACH;AACO;AAAwB;AACjB;AACd,IAFE,IAAI,KAAK,CAAC,KAAoB;AAChC,QAAI,IAAI,IAAI,CAAC,KAAK,EAAE;AACpB,YAAM,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;AAC/B,YACM,OAAO;AACb,SAAK;AACL,QAAI,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AACxB,KAAG;AACH;AAAQ;AACJ;AAAmB;AAAQ,IAA7B,IAAa,QAAQ;AAAK,QACxB,OAAO,IAAI,CAAC,SAAS,CAAC;AAC1B,KAAG;AACH;AACO;AAA2B;AACjB;AAAQ,IADvB,IAAI,QAAQ,CAAC,QAAiB;AAChC,QAAI,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;AAC9B,QAAI,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;AACpC,KAAG;AACH;AACO;AAAmB;AACvB,IADD,IAEI,QAAQ;AAAK,QACf,OAAO,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,KAAK,CAAC;AACxC,KAAG;AACH;AACO;AAAmB;AAC1B,IAUE,OAAO;AAAK,QACV,IAAI,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,KAAK,EAAE;AACxG,YAAM,OAAO;AACb,SAAK;AACL,QACI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,KAAK,GAAG,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC9F,QAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC/B,KAAG;AACH;AACO;AACF;AAAQ,IADX,QAAQ;AAAK,QACX,IAAI,CAAC,WAAW,GAAG,OAAO,IAAI,CAAC,WAAW,KAAK,WAAW,CAAC;AAC/D,KAAG;AACH;AACO;AACA;AAAQ,IADb,MAAM;AAAK,QACT,IAAI,CAAC,SAAS,EAAE,CAAC;AACrB,KAAG;AACH;AACO;AAAwB;AAChB;AACd,IAFC,SAAS,CAAC,KAAa;AAAI,QACzB,IAAI,IAAI,CAAC,KAAK,EAAE;AACpB,YAAM,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;AAC7B,YAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACjC,YACM,OAAO;AACb,SAAK;AACL,QAAI,IAAI,CAAC,SAAS,EAAE,CAAC;AACrB,QAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACzB,KAAG;AACH;AAEC;AACE;AAAQ;AAAwB;AACjB;AAChB,IAFA,UAAU,CAAC,KAAa;AAAI,QAC1B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACvB,QAAI,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;AAC5B,KAAG;AACH;AACO;AAAqB;AACtB;AAAQ,IADZ,gBAAgB,CAAC,EAAY;AAAI,QAC/B,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;AACvB,KAAG;AACH;AACO;AAAqB;AACvB;AAAQ,IADX,iBAAiB,CAAC,EAAY;AAAI,QAChC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;AACxB,KAAG;AACH;AACO;AAA2B;AAC3B;AAAQ,IADb,gBAAgB,CAAC,QAAiB;AAAI,QACpC,IAAI,QAAQ,EAAE;AAClB,YAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;AAChF,YACM,OAAO;AACb,SAAK;AACL,QAAI,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;AACrE,KAAG;AACH;gDAvGC,SAAS,SAAC,kBACT,QAAQ,EAAE,YAAY,kBACtB,SAAS,EAAE,CAAC,4BAA4B,CAAC,cAC1C;;;;;;sLACI;AAAC;AAAmB;AAA8C,YA5BrE,UAAU;AACV,YAHA,iBAAiB;AACjB,YAYO,yBAAyB,uBA4D7B,QAAQ;AAAO,YA/DlB,SAAS;AACT;AAAG;AACgB,uBAuBlB,KAAK;AAAK,0BAEV,KAAK;AAAK,oBAEV,KAAK;AAAK,uBAaV,KAAK;AAAK,uBASV,WAAW,SAAC,cAAc,cAC1B,WAAW,SAAC,mBAAmB;AAC7B,sBAcF,YAAY,SAAC,OAAO;AACnB;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAC;AACP;AAAqB,IAhDnB,wCAA8B;AAChC;AAAqB,IAAnB,yCAA+B;AACjC;AACO;AACF;AAAiB;AACrB,IADC,wCAA0B;AAC5B;AAAQ;AACJ;AAAiB;AAAQ,IAA3B,2CAA8B;AAChC;AAAQ;AAAiB;AAAgB;AAAQ,IA6B/C,sCAA+B;AACjC;AAAQ;AAAiB;AAEf;AACP,IAHD,yCAA2B;AAC7B;AACO;AACE;AAAgB;AACpB,IADD,kCAAsB;AAAC;AACpB;AAAiB;AACpB;AAAQ,IADR,mCAA8B;AAAC;AAC5B;AAAiB;AAAgB;AAAQ,IAA5C,qCAAoD;AAAC;AAClD;AAAiB;AAGxB;AAAQ,IAHJ,wCAA2B;AAC/B;AAAE;AAAC;AACH;AAEQ;AACiG;AChFzG;AAYA,MAAaA,8BAA4B,GAAa;AACtD,IAAE,OAAO,EAAE,iBAAiB;AAC5B;AACE,IAAA,WAAW,EAAE,UAAU;AAAM;AAAmB;AAAQ,IAAhC,MAAM,yBAAyB,EAAC;AAC1D,IAAE,KAAK,EAAE,IAAI;AACb,CAAC;AACD;AACG;AACyB;AACiD;AAM7E,MAAa,yBAAyB;AAAG;AAAQ;AAAsB;AACjE,IAcJ,YAAoB,GAAsB;AAAI,QAA1B,QAAG,GAAH,GAAG,CAAmB;AAAC,QAd3C,aAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC;AAChC,QAAE,cAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;AACjC,KAYgD;AAChD;AACO;AAAmB;AAAQ,IAXhC,IAAI,KAAK;AACX,QAAI,OAAO,IAAI,CAAC,MAAM,CAAC;AACvB,KAAG;AACH;AAAQ;AAAwB;AACjB;AAAQ,IADrB,IAAI,KAAK,CAAC,KAAoB;AAChC,QAAI,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AACxB,KAAG;AACH;AACO;AAAwB;AAEf;AAAQ,IAEtB,UAAU,CAAC,KAAoB;AAAI,QACjC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AACxB,QAAI,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;AAC5B,KAAG;AACH;AACO;AAAqB;AACtB;AAAQ,IADZ,gBAAgB,CAAC,EAAY;AAAI,QAC/B,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;AACvB,KAAG;AACH;AACO;AAAqB;AACvB;AAAQ,IADX,iBAAiB,CAAC,EAAY;AAAI,QAChC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;AACxB,KAAG;AACH;AACO;AAA2B;AAC3B;AAAQ,IADb,gBAAgB,CAAC,QAAiB;AAAI,QACpC,IAAI,IAAI,CAAC,YAAY,EAAE;AAC3B,YAAM,IAAI,CAAC,YAAY,CAAC,OAAO;AAAM;AACX;AACjB;AAIN,YAN6B,OAAO;AACvC,gBAAQ,OAAO,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;AAC3C,aAAO,EAAC,CAAC;AACT,SAAK;AACL,KAAG;AACH;qDAzCC,SAAS,SAAC,kBACT,QAAQ,EAAE,iBAAiB,kBAC3B,SAAS,EAAE,CAACA,8BAA4B,CAAC;UAC1C;;;;;oFACI;AAAC;AAAmB;AACtB,YA3BD,iBAAiB;AAClB;AAAG;AAGD,2BA0BA,eAAe,SAAC,UAAU;AAAM;AAA+B;AAAoB,gBAAxD,MAAM,oBAAoB,EAAC;AAAM;;;;;;;;;;;;oBAAE;AAAC;AAAa;AAAqB,IAHlG,6CAA8B;AAChC;AAAqB,IAAnB,8CAA+B;AACjC;AACoB,IAAlB,iDAAuG;AACzG;AACO;AACC;AACR;AACI,IAIF,2CAA8B;AAChC;AACO;AAAiB;AAAgB;AAAQ,IAAlC,wCAA8B;AAAC;AAAE;AAAC;AAE9C;AAAkC;AAM1B;AClDV,MAUa,aAAa;AAC1B;AAAQ;AAAmB;AAAQ,IAAjC,OAAO,OAAO;AAAK,QACjB,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC;AACtD,KAAG;AACH;yCARC,QAAQ,SAAC;KACR,YAAY,EAAE,CAAC,uBAAuB,EAAE,oBAAoB,EAAE,yBAAyB,CAAC,kBACxF,OAAO,EAAE,CAAC;WAAuB,EAAE,oBAAoB,EAAE,yBAAyB,CAAC,cACpF;;;;;;;;;;;0BACI;AAAC;AAAC;AAAI;AACK;AAIc;AAAI;AAAC;AAAI;AAAkC;AAAqH;AAAI;AAAC;AAAqN","sourcesContent":["// tslint:disable:no-use-before-declare\nimport {\n  Directive,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnInit,\n  Provider\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n// TODO: config: activeClass - Class to apply to the checked buttons\nexport const CHECKBOX_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => ButtonCheckboxDirective),\n  multi: true\n};\n\n/**\n * Add checkbox functionality to any element\n */\n@Directive({\n  selector: '[btnCheckbox]',\n  providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonCheckboxDirective implements ControlValueAccessor, OnInit {\n  /** Truthy value, will be set to ngModel */\n  @Input() btnCheckboxTrue = true;\n  /** Falsy value, will be set to ngModel */\n  @Input() btnCheckboxFalse = false;\n\n  @HostBinding('class.active')\n  @HostBinding('attr.aria-pressed')\n  state = false;\n\n  protected value: boolean | string;\n  protected isDisabled: boolean;\n\n  protected onChange = Function.prototype;\n  protected onTouched = Function.prototype;\n\n  // view -> model\n  @HostListener('click')\n  onClick(): void {\n    if (this.isDisabled) {\n      return;\n    }\n\n    this.toggle(!this.state);\n    this.onChange(this.value);\n  }\n\n  ngOnInit(): void {\n    this.toggle(this.trueValue === this.value);\n  }\n\n  protected get trueValue(): boolean {\n    return typeof this.btnCheckboxTrue !== 'undefined'\n      ? this.btnCheckboxTrue\n      : true;\n  }\n\n  protected get falseValue(): boolean {\n    return typeof this.btnCheckboxFalse !== 'undefined'\n      ? this.btnCheckboxFalse\n      : false;\n  }\n\n  toggle(state: boolean): void {\n    this.state = state;\n    this.value = this.state ? this.trueValue : this.falseValue;\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  writeValue(value: boolean | string | null): void {\n    this.state = this.trueValue === value;\n    this.value = value ? this.trueValue : this.falseValue;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n  registerOnChange(fn: () => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnInit,\n  Optional,\n  Provider,\n  Renderer2\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => ButtonRadioDirective),\n  multi: true\n};\n\n/**\n * Create radio buttons or groups of buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n@Directive({\n  selector: '[btnRadio]',\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonRadioDirective implements ControlValueAccessor, OnInit {\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n\n  /** Radio button value, will be set to `ngModel` */\n  @Input() btnRadio: string;\n  /** If `true` â radio button can be unchecked */\n  @Input() uncheckable: boolean;\n  /** Current value of radio component or group */\n  @Input() get value() {\n    return this.group ? this.group.value : this._value;\n  }\n\n  set value(value: null | string) {\n    if (this.group) {\n      this.group.value = value;\n\n      return;\n    }\n    this._value = value;\n  }\n  /** If `true` â radio button is disabled */\n  @Input() get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(disabled: boolean) {\n    this._disabled = disabled;\n    this.setDisabledState(disabled);\n  }\n\n  @HostBinding('class.active')\n  @HostBinding('attr.aria-pressed')\n  get isActive(): boolean {\n    return this.btnRadio === this.value;\n  }\n\n  private _value:  null | string;\n  private _disabled: boolean;\n\n  constructor(\n    private el: ElementRef,\n    private cdr: ChangeDetectorRef,\n    @Optional() private group: ButtonRadioGroupDirective,\n    private renderer: Renderer2\n  ) {}\n\n  @HostListener('click')\n  onClick(): void {\n    if (this.el.nativeElement.attributes.disabled || !this.uncheckable && this.btnRadio === this.value) {\n      return;\n    }\n\n    this.value = this.uncheckable && this.btnRadio === this.value ? undefined : this.btnRadio;\n    this._onChange(this.value);\n  }\n\n  ngOnInit(): void {\n    this.uncheckable = typeof this.uncheckable !== 'undefined';\n  }\n\n  onBlur(): void {\n    this.onTouched();\n  }\n\n  _onChange(value: string): void {\n    if (this.group) {\n      this.group.onTouched();\n      this.group.onChange(value);\n\n      return;\n    }\n    this.onTouched();\n    this.onChange(value);\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  writeValue(value: string): void {\n    this.value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: () => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    if (disabled) {\n      this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');\n\n      return;\n    }\n    this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\n  }\n}\n","import {\n  ChangeDetectorRef,\n  ContentChildren,\n  Directive,\n  forwardRef,\n  Provider,\n  QueryList\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { ButtonRadioDirective } from './button-radio.directive';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => ButtonRadioGroupDirective),\n  multi: true\n};\n\n/**\n * A group of radio buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n@Directive({\n  selector: '[btnRadioGroup]',\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonRadioGroupDirective implements ControlValueAccessor {\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n\n  @ContentChildren(forwardRef(() => ButtonRadioDirective)) radioButtons: QueryList<ButtonRadioDirective>;\n\n  get value() {\n    return this._value;\n  }\n  set value(value: string | null) {\n    this._value = value;\n  }\n\n  private _value: string | null;\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  writeValue(value: string | null): void {\n    this._value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: () => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    if (this.radioButtons) {\n      this.radioButtons.forEach(buttons => {\n        buttons.setDisabledState(disabled);\n      });\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { ButtonCheckboxDirective } from './button-checkbox.directive';\nimport { ButtonRadioDirective } from './button-radio.directive';\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\n\n@NgModule({\n  declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective],\n  exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective]\n})\nexport class ButtonsModule {\n  static forRoot(): ModuleWithProviders {\n    return { ngModule: ButtonsModule, providers: [] };\n  }\n}\n"]}