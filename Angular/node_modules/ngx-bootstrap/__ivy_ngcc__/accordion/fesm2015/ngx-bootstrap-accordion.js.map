{"version":3,"file":"ngx-bootstrap-accordion.js","sources":["ng:/ngx-bootstrap/accordion/accordion.config.ts","ng:/ngx-bootstrap/accordion/accordion.component.ts","ng:/ngx-bootstrap/accordion/accordion-group.component.ts","ng:/ngx-bootstrap/accordion/accordion.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n/**\n * Configuration service, provides default values for the AccordionComponent.\n */\n@Injectable()\nexport class AccordionConfig {\n  /** Whether the other panels should be closed when a panel is opened */\n  closeOthers: Boolean = false;\n  /** turn on/off animation */\n  isAnimated: Boolean = false;\n}\n","import { Component, Input } from '@angular/core';\nimport { AccordionPanelComponent } from './accordion-group.component';\nimport { AccordionConfig } from './accordion.config';\n\n/** Displays collapsible content panels for presenting information in a limited amount of space. */\n@Component({\n  selector: 'accordion',\n  template: `<ng-content></ng-content>`,\n  host: {\n    '[attr.aria-multiselectable]': 'closeOthers',\n    role: 'tablist',\n    class: 'panel-group',\n    style: 'display: block'\n  }\n})\nexport class AccordionComponent {\n  /** turn on/off animation */\n  @Input() isAnimated = false;\n  /** if `true` expanding one item will close all others */\n  @Input() closeOthers: boolean;\n\n  protected groups: AccordionPanelComponent[] = [];\n\n  constructor(config: AccordionConfig) {\n    Object.assign(this, config);\n  }\n\n  closeOtherPanels(openGroup: AccordionPanelComponent): void {\n    if (!this.closeOthers) {\n      return;\n    }\n\n    this.groups.forEach((group: AccordionPanelComponent) => {\n      if (group !== openGroup) {\n        group.isOpen = false;\n      }\n    });\n  }\n\n  addGroup(group: AccordionPanelComponent): void {\n    group.isAnimated = this.isAnimated;\n    this.groups.push(group);\n  }\n\n  removeGroup(group: AccordionPanelComponent): void {\n    const index = this.groups.indexOf(group);\n    if (index !== -1) {\n      this.groups.splice(index, 1);\n    }\n  }\n}\n","import {\n  Component, HostBinding, Inject, Input, OnDestroy, OnInit, Output, EventEmitter\n} from '@angular/core';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport { AccordionComponent } from './accordion.component';\n\n/**\n * ### Accordion heading\n * Instead of using `heading` attribute on the `accordion-group`, you can use\n * an `accordion-heading` attribute on `any` element inside of a group that\n * will be used as group's header template.\n */\n@Component({\n  selector: 'accordion-group, accordion-panel',\n  templateUrl: './accordion-group.component.html',\n  host: {\n    class: 'panel',\n    style: 'display: block'\n  },\n  styleUrls: ['./accordion.scss']\n})\nexport class AccordionPanelComponent implements OnInit, OnDestroy {\n  /** turn on/off animation */\n  isAnimated = false;\n  /** Clickable text in accordion's group header, check `accordion heading` below for using html in header */\n  @Input() heading: string;\n  /** Provides an ability to use Bootstrap's contextual panel classes\n   * (`panel-primary`, `panel-success`, `panel-info`, etc...).\n   * List of all available classes [available here]\n   * (https://getbootstrap.com/docs/3.3/components/#panels-alternatives)\n   */\n  @Input() panelClass: string;\n  /** if <code>true</code> â disables accordion group */\n  @Input() isDisabled: boolean;\n  /** Emits when the opened state changes */\n  @Output() isOpenChange: EventEmitter<boolean> = new EventEmitter();\n\n  // Questionable, maybe .panel-open should be on child div.panel element?\n  /** Is accordion group open or closed. This property supports two-way binding */\n  @HostBinding('class.panel-open')\n  @Input()\n  get isOpen(): boolean {\n    return this._isOpen;\n  }\n\n  set isOpen(value: boolean) {\n    if (value !== this.isOpen) {\n      if (value) {\n        this.accordion.closeOtherPanels(this);\n      }\n      this._isOpen = value;\n      Promise.resolve(null).then(() => {\n        this.isOpenChange.emit(value);\n      })\n        .catch((error: Error) => {\n          /* tslint:disable: no-console */\n          console.log(error);\n        });\n    }\n  }\n\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  protected _isOpen = false;\n  protected accordion: AccordionComponent;\n\n  constructor(@Inject(AccordionComponent) accordion: AccordionComponent) {\n    this.accordion = accordion;\n  }\n\n  ngOnInit(): void {\n    this.panelClass = this.panelClass || 'panel-default';\n    this.accordion.addGroup(this);\n  }\n\n  ngOnDestroy(): void {\n    this.accordion.removeGroup(this);\n  }\n\n  toggleOpen(): void {\n    if (!this.isDisabled) {\n      this.isOpen = !this.isOpen;\n    }\n  }\n}\n","/* tslint:disable: max-classes-per-file */\nimport { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { AccordionComponent } from './accordion.component';\nimport { AccordionConfig } from './accordion.config';\nimport { AccordionPanelComponent } from './accordion-group.component';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\n\n@NgModule({\n  imports: [CommonModule, CollapseModule],\n  declarations: [AccordionComponent, AccordionPanelComponent],\n  exports: [AccordionComponent, AccordionPanelComponent]\n})\nexport class AccordionModule {\n  static forRoot(): ModuleWithProviders {\n    return { ngModule: AccordionModule, providers: [AccordionConfig] };\n  }\n}\n"]}