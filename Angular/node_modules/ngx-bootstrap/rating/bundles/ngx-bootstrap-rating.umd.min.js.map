{"version":3,"sources":["ng://ngx-bootstrap/rating/rating.config.ts","ng://ngx-bootstrap/rating/rating.component.ts","ng://ngx-bootstrap/rating/rating.module.ts"],"names":["RatingConfig","this","ariaLabel","Injectable","RATING_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","RatingComponent","multi","changeDetection","config","max","onHover","EventEmitter","onLeave","onChange","Function","prototype","onTouched","Object","assign","onKeydown","event","indexOf","which","preventDefault","stopPropagation","sign","rate","value","ngOnInit","titles","length","range","buildTemplateObjects","writeValue","Math","round","preValue","markForCheck","enter","readonly","emit","reset","registerOnChange","fn","registerOnTouched","result","i","push","index","title","Component","args","selector","template","providers","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","Input","Output","HostListener","RatingModule","forRoot","ngModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"idAGA,SAAAA,IAGEC,KAAAC,UAAY,SACd,2BAJCC,EAAAA,aAIDH,SCMaI,EAAiD,CAC5DC,QAASC,EAAAA,kBAETC,YAAaC,EAAAA,YAAU,WAAO,OAAAC,KAC9BC,OAAO,gBAkCP,SAAAD,EAAoBE,EACRC,GADQX,KAAAU,gBAAAA,EAvBXV,KAAAY,IAAM,EASLZ,KAAAa,QAAgC,IAAIC,EAAAA,aAEpCd,KAAAe,QAAgC,IAAID,EAAAA,aAG9Cd,KAAAgB,SAAgBC,SAASC,UAEzBlB,KAAAmB,UAAiBF,SAASC,UASxBE,OAAOC,OAAOrB,KAAMW,GAiFxB,OA7EEH,EAAAU,UAAAI,UADA,SACUC,GAER,IAA+C,IAA3C,CAAC,GAAI,GAAI,GAAI,IAAIC,QAAQD,EAAME,OAAnC,CAIAF,EAAMG,iBACNH,EAAMI,sBAEAC,EAAuB,KAAhBL,EAAME,OAAgC,KAAhBF,EAAME,MAAe,GAAK,EAC7DzB,KAAK6B,KAAK7B,KAAK8B,MAAQF,KAGzBpB,EAAAU,UAAAa,SAAA,WACE/B,KAAKY,SAA0B,IAAbZ,KAAKY,IAAsBZ,KAAKY,IAAM,EACxDZ,KAAKgC,YACoB,IAAhBhC,KAAKgC,QAA0BhC,KAAKgC,OAAOC,OAAS,EACvDjC,KAAKgC,OACL,GACNhC,KAAKkC,MAAQlC,KAAKmC,qBAAqBnC,KAAKY,MAI9CJ,EAAAU,UAAAkB,WAAA,SAAWN,GACT,GAAIA,EAAQ,IAAMA,EAKhB,OAJA9B,KAAK8B,MAAQO,KAAKC,MAAMR,GACxB9B,KAAKuC,SAAWT,OAChB9B,KAAKU,gBAAgB8B,eAKvBxC,KAAKuC,SAAWT,EAChB9B,KAAK8B,MAAQA,EACb9B,KAAKU,gBAAgB8B,gBAGvBhC,EAAAU,UAAAuB,MAAA,SAAMX,GACC9B,KAAK0C,WACR1C,KAAK8B,MAAQA,EACb9B,KAAKU,gBAAgB8B,eACrBxC,KAAKa,QAAQ8B,KAAKb,KAItBtB,EAAAU,UAAA0B,MAAA,WACE5C,KAAK8B,MAAQO,KAAKC,MAAMtC,KAAKuC,UAC7BvC,KAAKU,gBAAgB8B,eACrBxC,KAAKe,QAAQ4B,KAAK3C,KAAK8B,QAGzBtB,EAAAU,UAAA2B,iBAAA,SAAiBC,GACf9C,KAAKgB,SAAW8B,GAGlBtC,EAAAU,UAAA6B,kBAAA,SAAkBD,GAChB9C,KAAKmB,UAAY2B,GAGnBtC,EAAAU,UAAAW,KAAA,SAAKC,IACE9B,KAAK0C,UAAYZ,GAAS,GAAKA,GAAS9B,KAAKkC,MAAMD,SACtDjC,KAAKoC,WAAWN,GAChB9B,KAAKgB,SAASc,KAIRtB,EAAAU,UAAAiB,qBAAV,SAA+BvB,GAE7B,QADMoC,EAA0B,GACvBC,EAAI,EAAGA,EAAIrC,EAAKqC,IACvBD,EAAOE,KAAK,CACRC,MAAOF,EACPG,MAAOpD,KAAKgC,OAAOiB,IAAMA,EAAI,IAInC,OAAOD,uBAhHVK,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,SACVC,SAAA,g7BACAC,UAAW,CAACtD,GACZO,gBAAiBgD,EAAAA,wBAAwBC,oDAjBSC,EAAAA,yBAI3C7D,kCAiBN8D,EAAAA,wBAEAA,EAAAA,sBAEAA,EAAAA,8BAGAA,EAAAA,uBAEAC,EAAAA,wBAEAA,EAAAA,0BAiBAC,EAAAA,aAAYT,KAAA,CAAC,UAAW,CAAC,cA8E5B9C,sBChIA,SAAAwD,KAYA,OANSA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUF,EACVP,UAAW,CAAC1D,yBATjBoE,EAAAA,SAAQb,KAAA,CAAC,CACRc,QAAS,CAACC,EAAAA,cACVC,aAAc,CAAC9D,GACf+D,QAAS,CAAC/D,OASZwD","sourcesContent":["import { Injectable } from '@angular/core';\n\n/** Default values provider for rating */\n@Injectable()\nexport class RatingConfig {\n  /** aria label for rating */\n  ariaLabel = 'rating';\n}\n","import {\n  Component,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnInit,\n  Output,\n  forwardRef, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { AccessorContent, RatingResults } from './models';\nimport { RatingConfig } from './rating.config';\n\nexport const RATING_CONTROL_VALUE_ACCESSOR: AccessorContent = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => RatingComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'rating',\n  templateUrl: './rating.component.html',\n  providers: [RATING_CONTROL_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RatingComponent implements ControlValueAccessor, OnInit {\n  /** number of icons */\n  @Input() max = 5;\n  /** if true will not react on any user events */\n  @Input() readonly: boolean;\n  /** array of icons titles, default: ([\"one\", \"two\", \"three\", \"four\", \"five\"]) */\n  @Input() titles: string[];\n  /** custom template for icons */\n  // tslint:disable-next-line:no-any\n  @Input() customTemplate: TemplateRef<any>;\n  /** fired when icon selected, $event:number equals to selected rating */\n  @Output() onHover: EventEmitter<number> = new EventEmitter();\n  /** fired when icon selected, $event:number equals to previous rating value */\n  @Output() onLeave: EventEmitter<number> = new EventEmitter();\n\n  // tslint:disable-next-line:no-any\n  onChange: any = Function.prototype;\n  // tslint:disable-next-line:no-any\n  onTouched: any = Function.prototype;\n  /** aria label for rating */\n  ariaLabel: string;\n  range: RatingResults[];\n  value: number;\n  protected preValue: number;\n\n  constructor(private changeDetection: ChangeDetectorRef,\n              config: RatingConfig) {\n    Object.assign(this, config);\n  }\n\n  @HostListener('keydown', ['$event'])\n  onKeydown(event: KeyboardEvent): void {\n    /* tslint:disable-next-line: deprecation */\n    if ([37, 38, 39, 40].indexOf(event.which) === -1) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n    /* tslint:disable-next-line: deprecation */\n    const sign = event.which === 38 || event.which === 39 ? 1 : -1;\n    this.rate(this.value + sign);\n  }\n\n  ngOnInit(): void {\n    this.max = typeof this.max !== 'undefined' ? this.max : 5;\n    this.titles =\n      typeof this.titles !== 'undefined' && this.titles.length > 0\n        ? this.titles\n        : [];\n    this.range = this.buildTemplateObjects(this.max);\n  }\n\n  // model -> view\n  writeValue(value: number): void {\n    if (value % 1 !== value) {\n      this.value = Math.round(value);\n      this.preValue = value;\n      this.changeDetection.markForCheck();\n\n      return;\n    }\n\n    this.preValue = value;\n    this.value = value;\n    this.changeDetection.markForCheck();\n  }\n\n  enter(value: number): void {\n    if (!this.readonly) {\n      this.value = value;\n      this.changeDetection.markForCheck();\n      this.onHover.emit(value);\n    }\n  }\n\n  reset(): void {\n    this.value = Math.round(this.preValue);\n    this.changeDetection.markForCheck();\n    this.onLeave.emit(this.value);\n  }\n\n  registerOnChange(fn: (_: number) => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n\n  rate(value: number): void {\n    if (!this.readonly && value >= 0 && value <= this.range.length) {\n      this.writeValue(value);\n      this.onChange(value);\n    }\n  }\n\n  protected buildTemplateObjects(max: number): RatingResults[] {\n    const result: RatingResults[] = [];\n    for (let i = 0; i < max; i++) {\n      result.push({\n          index: i,\n          title: this.titles[i] || i + 1\n        });\n    }\n\n    return result;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { RatingComponent } from './rating.component';\nimport { RatingConfig } from './rating.config';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [RatingComponent],\n  exports: [RatingComponent]\n})\nexport class RatingModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: RatingModule,\n      providers: [RatingConfig]\n    };\n  }\n}\n"]}