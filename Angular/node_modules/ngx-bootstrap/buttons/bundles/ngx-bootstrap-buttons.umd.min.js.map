{"version":3,"sources":["ng://ngx-bootstrap/buttons/button-checkbox.directive.ts","ng://ngx-bootstrap/buttons/button-radio.directive.ts","ng://ngx-bootstrap/buttons/button-radio-group.directive.ts","ng://ngx-bootstrap/buttons/buttons.module.ts"],"names":["CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","ButtonCheckboxDirective","multi","this","btnCheckboxTrue","btnCheckboxFalse","state","onChange","Function","prototype","onTouched","onClick","isDisabled","toggle","value","ngOnInit","trueValue","Object","defineProperty","falseValue","writeValue","setDisabledState","registerOnChange","fn","registerOnTouched","Directive","args","selector","providers","Input","HostBinding","type","HostListener","RADIO_CONTROL_VALUE_ACCESSOR","ButtonRadioDirective","el","cdr","group","renderer","_value","_disabled","disabled","btnRadio","nativeElement","attributes","uncheckable","undefined","_onChange","onBlur","markForCheck","setAttribute","removeAttribute","ElementRef","ChangeDetectorRef","ButtonRadioGroupDirective","decorators","Optional","Renderer2","radioButtons","forEach","buttons","ContentChildren","ButtonsModule","forRoot","ngModule","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["// tslint:disable:no-use-before-declare\nimport {\n  Directive,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnInit,\n  Provider\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n// TODO: config: activeClass - Class to apply to the checked buttons\nexport const CHECKBOX_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => ButtonCheckboxDirective),\n  multi: true\n};\n\n/**\n * Add checkbox functionality to any element\n */\n@Directive({\n  selector: '[btnCheckbox]',\n  providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonCheckboxDirective implements ControlValueAccessor, OnInit {\n  /** Truthy value, will be set to ngModel */\n  @Input() btnCheckboxTrue = true;\n  /** Falsy value, will be set to ngModel */\n  @Input() btnCheckboxFalse = false;\n\n  @HostBinding('class.active')\n  @HostBinding('attr.aria-pressed')\n  state = false;\n\n  protected value: boolean | string;\n  protected isDisabled: boolean;\n\n  protected onChange = Function.prototype;\n  protected onTouched = Function.prototype;\n\n  // view -> model\n  @HostListener('click')\n  onClick(): void {\n    if (this.isDisabled) {\n      return;\n    }\n\n    this.toggle(!this.state);\n    this.onChange(this.value);\n  }\n\n  ngOnInit(): void {\n    this.toggle(this.trueValue === this.value);\n  }\n\n  protected get trueValue(): boolean {\n    return typeof this.btnCheckboxTrue !== 'undefined'\n      ? this.btnCheckboxTrue\n      : true;\n  }\n\n  protected get falseValue(): boolean {\n    return typeof this.btnCheckboxFalse !== 'undefined'\n      ? this.btnCheckboxFalse\n      : false;\n  }\n\n  toggle(state: boolean): void {\n    this.state = state;\n    this.value = this.state ? this.trueValue : this.falseValue;\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  writeValue(value: boolean | string | null): void {\n    this.state = this.trueValue === value;\n    this.value = value ? this.trueValue : this.falseValue;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n  registerOnChange(fn: () => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnInit,\n  Optional,\n  Provider,\n  Renderer2\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => ButtonRadioDirective),\n  multi: true\n};\n\n/**\n * Create radio buttons or groups of buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n@Directive({\n  selector: '[btnRadio]',\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonRadioDirective implements ControlValueAccessor, OnInit {\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n\n  /** Radio button value, will be set to `ngModel` */\n  @Input() btnRadio: string;\n  /** If `true` â radio button can be unchecked */\n  @Input() uncheckable: boolean;\n  /** Current value of radio component or group */\n  @Input() get value() {\n    return this.group ? this.group.value : this._value;\n  }\n\n  set value(value: null | string) {\n    if (this.group) {\n      this.group.value = value;\n\n      return;\n    }\n    this._value = value;\n  }\n  /** If `true` â radio button is disabled */\n  @Input() get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(disabled: boolean) {\n    this._disabled = disabled;\n    this.setDisabledState(disabled);\n  }\n\n  @HostBinding('class.active')\n  @HostBinding('attr.aria-pressed')\n  get isActive(): boolean {\n    return this.btnRadio === this.value;\n  }\n\n  private _value:  null | string;\n  private _disabled: boolean;\n\n  constructor(\n    private el: ElementRef,\n    private cdr: ChangeDetectorRef,\n    @Optional() private group: ButtonRadioGroupDirective,\n    private renderer: Renderer2\n  ) {}\n\n  @HostListener('click')\n  onClick(): void {\n    if (this.el.nativeElement.attributes.disabled || !this.uncheckable && this.btnRadio === this.value) {\n      return;\n    }\n\n    this.value = this.uncheckable && this.btnRadio === this.value ? undefined : this.btnRadio;\n    this._onChange(this.value);\n  }\n\n  ngOnInit(): void {\n    this.uncheckable = typeof this.uncheckable !== 'undefined';\n  }\n\n  onBlur(): void {\n    this.onTouched();\n  }\n\n  _onChange(value: string): void {\n    if (this.group) {\n      this.group.onTouched();\n      this.group.onChange(value);\n\n      return;\n    }\n    this.onTouched();\n    this.onChange(value);\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  writeValue(value: string): void {\n    this.value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: () => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    if (disabled) {\n      this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');\n\n      return;\n    }\n    this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\n  }\n}\n","import {\n  ChangeDetectorRef,\n  ContentChildren,\n  Directive,\n  forwardRef,\n  Provider,\n  QueryList\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { ButtonRadioDirective } from './button-radio.directive';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => ButtonRadioGroupDirective),\n  multi: true\n};\n\n/**\n * A group of radio buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n@Directive({\n  selector: '[btnRadioGroup]',\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonRadioGroupDirective implements ControlValueAccessor {\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n\n  @ContentChildren(forwardRef(() => ButtonRadioDirective)) radioButtons: QueryList<ButtonRadioDirective>;\n\n  get value() {\n    return this._value;\n  }\n  set value(value: string | null) {\n    this._value = value;\n  }\n\n  private _value: string | null;\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  writeValue(value: string | null): void {\n    this._value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: () => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    if (this.radioButtons) {\n      this.radioButtons.forEach(buttons => {\n        buttons.setDisabledState(disabled);\n      });\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { ButtonCheckboxDirective } from './button-checkbox.directive';\nimport { ButtonRadioDirective } from './button-radio.directive';\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\n\n@NgModule({\n  declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective],\n  exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective]\n})\nexport class ButtonsModule {\n  static forRoot(): ModuleWithProviders {\n    return { ngModule: ButtonsModule, providers: [] };\n  }\n}\n"]}