{"version":3,"file":"testing.js","sources":["../../../../../../packages/platform-browser-dynamic/testing/src/dom_test_component_renderer.ts","../../../../../../packages/platform-browser-dynamic/testing/src/compiler_factory.ts","../../../../../../packages/platform-browser-dynamic/testing/src/platform_core_dynamic_testing.ts","../../../../../../packages/platform-browser-dynamic/testing/src/testing.ts","../../../../../../packages/platform-browser-dynamic/testing/testing.ts"],"names":["getDOM","MetadataOverrider","stringify","platformCoreDynamic","TestingCompilerFactory","INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {TestComponentRenderer} from '@angular/core/testing';\n\n/**\n * A DOM based implementation of the TestComponentRenderer.\n */\n@Injectable()\nexport class DOMTestComponentRenderer extends TestComponentRenderer {\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n  }\n\n  insertRootElement(rootElId: string) {\n    const template = getDOM().getDefaultDocument().createElement('template');\n    template.innerHTML = `<div id=\"${rootElId}\"></div>`;\n    const rootEl = <HTMLElement>getContent(template).firstChild;\n\n    // TODO(juliemr): can/should this be optional?\n    const oldRoots = this._doc.querySelectorAll('[id^=root]');\n    for (let i = 0; i < oldRoots.length; i++) {\n      getDOM().remove(oldRoots[i]);\n    }\n    this._doc.body.appendChild(rootEl);\n  }\n}\n\nfunction getContent(node: Node): Node {\n  if ('content' in node) {\n    return (<any>node).content;\n  } else {\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector, DirectiveResolver, ERROR_COMPONENT_TYPE, NgModuleResolver, PipeResolver} from '@angular/compiler';\nimport {MockDirectiveResolver, MockNgModuleResolver, MockPipeResolver} from '@angular/compiler/testing';\nimport {CompilerFactory, CompilerOptions, Component, ComponentFactory, Directive, Injector, ModuleWithComponentFactories, NgModule, NgModuleFactory, Pipe, StaticProvider, Type, ɵstringify as stringify} from '@angular/core';\nimport {MetadataOverride, ɵTestingCompiler as TestingCompiler, ɵTestingCompilerFactory as TestingCompilerFactory} from '@angular/core/testing';\nimport {ɵCompilerImpl as CompilerImpl} from '@angular/platform-browser-dynamic';\n\nimport {MetadataOverrider} from './metadata_overrider';\n\nexport const COMPILER_PROVIDERS: StaticProvider[] = [\n  {provide: MockPipeResolver, deps: [CompileReflector]},\n  {provide: PipeResolver, useExisting: MockPipeResolver},\n  {provide: MockDirectiveResolver, deps: [CompileReflector]},\n  {provide: DirectiveResolver, useExisting: MockDirectiveResolver},\n  {provide: MockNgModuleResolver, deps: [CompileReflector]},\n  {provide: NgModuleResolver, useExisting: MockNgModuleResolver},\n];\n\nexport class TestingCompilerFactoryImpl implements TestingCompilerFactory {\n  constructor(private _injector: Injector, private _compilerFactory: CompilerFactory) {}\n\n  createTestingCompiler(options: CompilerOptions[]): TestingCompiler {\n    const compiler = <CompilerImpl>this._compilerFactory.createCompiler(options);\n    return new TestingCompilerImpl(\n        compiler, compiler.injector.get(MockDirectiveResolver),\n        compiler.injector.get(MockPipeResolver), compiler.injector.get(MockNgModuleResolver));\n  }\n}\n\nexport class TestingCompilerImpl implements TestingCompiler {\n  private _overrider = new MetadataOverrider();\n  constructor(\n      private _compiler: CompilerImpl, private _directiveResolver: MockDirectiveResolver,\n      private _pipeResolver: MockPipeResolver, private _moduleResolver: MockNgModuleResolver) {}\n  get injector(): Injector {\n    return this._compiler.injector;\n  }\n\n  compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T> {\n    return this._compiler.compileModuleSync(moduleType);\n  }\n\n  compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> {\n    return this._compiler.compileModuleAsync(moduleType);\n  }\n  compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T> {\n    return this._compiler.compileModuleAndAllComponentsSync(moduleType);\n  }\n\n  compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>):\n      Promise<ModuleWithComponentFactories<T>> {\n    return this._compiler.compileModuleAndAllComponentsAsync(moduleType);\n  }\n\n  getComponentFactory<T>(component: Type<T>): ComponentFactory<T> {\n    return this._compiler.getComponentFactory(component);\n  }\n\n  checkOverrideAllowed(type: Type<any>) {\n    if (this._compiler.hasAotSummary(type)) {\n      throw new Error(`${stringify(type)} was AOT compiled, so its metadata cannot be changed.`);\n    }\n  }\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void {\n    this.checkOverrideAllowed(ngModule);\n    const oldMetadata = this._moduleResolver.resolve(ngModule, false);\n    this._moduleResolver.setNgModule(\n        ngModule, this._overrider.overrideMetadata(NgModule, oldMetadata, override));\n    this.clearCacheFor(ngModule);\n  }\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void {\n    this.checkOverrideAllowed(directive);\n    const oldMetadata = this._directiveResolver.resolve(directive, false);\n    this._directiveResolver.setDirective(\n        directive, this._overrider.overrideMetadata(Directive, oldMetadata!, override));\n    this.clearCacheFor(directive);\n  }\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void {\n    this.checkOverrideAllowed(component);\n    const oldMetadata = this._directiveResolver.resolve(component, false);\n    this._directiveResolver.setDirective(\n        component, this._overrider.overrideMetadata(Component, oldMetadata!, override));\n    this.clearCacheFor(component);\n  }\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void {\n    this.checkOverrideAllowed(pipe);\n    const oldMetadata = this._pipeResolver.resolve(pipe, false);\n    this._pipeResolver.setPipe(pipe, this._overrider.overrideMetadata(Pipe, oldMetadata, override));\n    this.clearCacheFor(pipe);\n  }\n  loadAotSummaries(summaries: () => any[]) {\n    this._compiler.loadAotSummaries(summaries);\n  }\n  clearCache(): void {\n    this._compiler.clearCache();\n  }\n  clearCacheFor(type: Type<any>) {\n    this._compiler.clearCacheFor(type);\n  }\n\n  getComponentFromError(error: Error) {\n    return (error as any)[ERROR_COMPONENT_TYPE] || null;\n  }\n\n  getModuleId(moduleType: Type<any>): string|undefined {\n    return this._moduleResolver.resolve(moduleType, true).id;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {COMPILER_OPTIONS, CompilerFactory, createPlatformFactory, Injector, PlatformRef} from '@angular/core';\nimport {ɵTestingCompilerFactory as TestingCompilerFactory} from '@angular/core/testing';\nimport {ɵplatformCoreDynamic as platformCoreDynamic} from '@angular/platform-browser-dynamic';\n\nimport {COMPILER_PROVIDERS, TestingCompilerFactoryImpl} from './compiler_factory';\n\n/**\n * Platform for dynamic tests\n *\n * @publicApi\n */\nexport const platformCoreDynamicTesting: (extraProviders?: any[]) => PlatformRef =\n    createPlatformFactory(platformCoreDynamic, 'coreDynamicTesting', [\n      {provide: COMPILER_OPTIONS, useValue: {providers: COMPILER_PROVIDERS}, multi: true}, {\n        provide: TestingCompilerFactory,\n        useClass: TestingCompilerFactoryImpl,\n        deps: [Injector, CompilerFactory]\n      }\n    ]);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {createPlatformFactory, NgModule, PlatformRef, StaticProvider} from '@angular/core';\nimport {TestComponentRenderer} from '@angular/core/testing';\nimport {ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS as INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS} from '@angular/platform-browser-dynamic';\nimport {BrowserTestingModule} from '@angular/platform-browser/testing';\n\nimport {DOMTestComponentRenderer} from './dom_test_component_renderer';\nimport {platformCoreDynamicTesting} from './platform_core_dynamic_testing';\n\nexport * from './private_export_testing';\n\n/**\n * @publicApi\n */\nexport const platformBrowserDynamicTesting = createPlatformFactory(\n    platformCoreDynamicTesting, 'browserDynamicTesting',\n    INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n\n/**\n * NgModule for testing.\n *\n * @publicApi\n */\n@NgModule({\n  exports: [BrowserTestingModule],\n  providers: [\n    {provide: TestComponentRenderer, useClass: DOMTestComponentRenderer},\n  ]\n})\nexport class BrowserDynamicTestingModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {COMPILER_PROVIDERS as ɵangular_packages_platform_browser_dynamic_testing_testing_a,TestingCompilerFactoryImpl as ɵangular_packages_platform_browser_dynamic_testing_testing_b} from './src/compiler_factory';"]}